rules_version = '2';
// Updated 2025-09-27 - Fixed email matching for admin authentication
service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny everything
    match /{document=**} {
      allow read, write: if false;
    }

    // =========================
    // EVENTS
    // =========================
    match /events/{eventId} {
      allow read: if true;

      allow create: if isAdmin() && validEventOnCreate();
      allow update: if isAdmin() && validEventOnUpdate();
      allow delete: if isAdmin();

      function isAdmin() {
        return request.auth != null
          && request.auth.token.email_verified == true
          && (request.auth.token.email == "802soulkitchen@gmail.com" 
              || request.auth.token.email == "scottkunian@gmail.com");
      }

      // ---- Event schema helpers ----
      function requiredEventKeys() {
        return ['name','location','dateTimes','date'];
      }

      function allowedEventKeys() {
        // Keep this tight. Add extras here ONLY if you actually write them.
        return ['name','location','description','dateTimes','date'];
        // Example if you later add fields:
        // return ['name','location','description','dateTimes','date','createdAt','updatedAt','images','status'];
      }

      function validEventOnCreate() {
        let d = request.resource.data;
        
        // Basic structure validation
        let hasRequiredKeys = d.keys().hasOnly(allowedEventKeys())
            && requiredEventKeys().toSet().difference(d.keys().toSet()).size() == 0;
        
        // Basic field validation
        let validBasicFields = d.name is string && d.name.size() > 0 && d.name.size() <= 100
            && d.location is string && d.location.size() > 0 && d.location.size() <= 200
            && d.date is string && d.date.size() == 10;
            
        // Description validation (optional field)
        let validDescription = !('description' in d) || (d.description is string && d.description.size() <= 1000);
        
        // DateTimes validation - simplified to avoid complex iterator issues
        let validDateTimes = d.dateTimes is list && d.dateTimes.size() > 0;
        
        return hasRequiredKeys && validBasicFields && validDescription && validDateTimes;
      }

      function validEventOnUpdate() {
        let d = request.resource.data;
        
        // Basic structure validation - same as create
        let hasRequiredKeys = d.keys().hasOnly(allowedEventKeys())
            && requiredEventKeys().toSet().difference(d.keys().toSet()).size() == 0;
        
        // Basic field validation - same as create
        let validBasicFields = d.name is string && d.name.size() > 0 && d.name.size() <= 100
            && d.location is string && d.location.size() > 0 && d.location.size() <= 200
            && d.date is string && d.date.size() == 10;
            
        // Description validation (optional field) - same as create
        let validDescription = !('description' in d) || (d.description is string && d.description.size() <= 1000);
        
        // DateTimes validation - simplified to avoid complex iterator issues
        let validDateTimes = d.dateTimes is list && d.dateTimes.size() > 0;
        
        return hasRequiredKeys && validBasicFields && validDescription && validDateTimes;
      }
    }

    // =========================
    // MENU
    // =========================
    match /menu/{itemId} {
      allow read: if true;

      allow create: if isAdmin() && validMenuOnCreate();
      allow update: if isAdmin() && validMenuOnUpdate();
      allow delete: if isAdmin();

      function isAdmin() {
        return request.auth != null
          && request.auth.token.email_verified == true
          && (request.auth.token.email == "802soulkitchen@gmail.com" 
              || request.auth.token.email == "scottkunian@gmail.com");
      }

      // ---- Menu schema helpers ----
      function requiredMenuKeys() {
        return ['name','category'];
      }

      function allowedMenuKeys() {
        return ['name','description','category','order'];
      }

      function categoryOk(cat) {
        return cat in ['Mains','Combos','Sides','Drinks','Dessert'];
      }

      function menuBasicsOk(d) {
        return d.name is string && d.name.size() > 0 && d.name.size() <= 100
            && categoryOk(d.category)
            && (!('description' in d) || (d.description is string && d.description.size() <= 500))
            && (!('order' in d) || (d.order is int && d.order >= 0 && d.order <= 999));
      }

      function validMenuOnCreate() {
        let d = request.resource.data;
        return d.keys().hasOnly(allowedMenuKeys())
            && requiredMenuKeys().toSet().difference(d.keys().toSet()).size() == 0
            && menuBasicsOk(d);
      }

      function validMenuOnUpdate() {
        let d = request.resource.data;
        let hasRequired = requiredMenuKeys().toSet().difference(d.keys().toSet()).size() == 0;

        // Diff-based update validation like events
        let diff = d.diff(resource.data);
        let changed = diff.changedKeys().union(diff.addedKeys());

        return changed.hasOnly(allowedMenuKeys())
            && hasRequired
            && menuBasicsOk(d);
      }
    }
  }
}
