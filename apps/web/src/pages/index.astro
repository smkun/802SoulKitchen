---
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="description" content="802 Soul Kitchen brings authentic soul food to Vermont festivals, markets, and special events. Find our next pop-up location in Brattleboro and surrounding areas." />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
  <title>802 Soul Kitchen - Vermont Pop-Up Soul Food | Festivals & Events</title>
</head>
<body>
  <!-- Content wrapper -->
  <div class="bg-brand-dark text-brand-white min-h-screen relative overflow-x-hidden">

    <!-- Corner gradients -->
    <div class="fixed inset-0 pointer-events-none z-0">
      <div class="absolute top-0 left-0 w-96 h-96 bg-gradient-to-br from-brand-red/20 to-transparent rounded-full blur-3xl"></div>
      <div class="absolute top-0 right-0 w-96 h-96 bg-gradient-to-bl from-brand-orange/20 to-transparent rounded-full blur-3xl"></div>
      <div class="absolute bottom-0 left-0 w-96 h-96 bg-gradient-to-tr from-brand-orange/15 to-transparent rounded-full blur-3xl"></div>
      <div class="absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-tl from-brand-red/15 to-transparent rounded-full blur-3xl"></div>
    </div>

    <!-- Three-column layout container -->
    <div class="flex min-h-screen">
      <!-- Left Sidebar - Logo and Contact (Fixed) -->
      <div class="w-80 bg-brand-dark fixed left-0 top-0 h-screen p-6 overflow-y-auto z-20 border-r-4 border-brand-orange/30">
        <!-- Logo -->
        <div class="mb-8">
          <img
            src="/assets/802Logo.png"
            alt="802 Soul Kitchen - Vermont Pop-Up Soul Food Restaurant Logo"
            class="h-64 logo-glow mb-6"
          />
          <h1 class="sr-only">
            802 Soul Kitchen - Authentic Soul Food at Vermont Festivals and Events
          </h1>
        </div>

        <!-- Contact Info -->
        <div class="text-brand-white mb-8">
          <h3 class="text-xl font-bold mb-4 text-brand-orange">Contact Us</h3>
          <div class="space-y-4 text-sm">
            <div class="flex items-start">
              <svg class="w-5 h-5 mr-3 mt-0.5 text-brand-red flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              <span>Brattleboro, VT<br />05301</span>
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-3 text-brand-red flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
              </svg>
              <a href="tel:802-490-9163" class="hover:text-brand-red">(802) 490-9163</a>
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-3 text-brand-red flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
              <a href="mailto:802soulkitchen@gmail.com" class="hover:text-brand-red break-all">802soulkitchen@gmail.com</a>
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-3 text-brand-red flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
                <path d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32V7.46H6.11v4.24h3.39v12h5.09V11.7h3.74l.56-4.24z"></path>
              </svg>
              <a href="https://www.facebook.com/profile.php?id=100092039355894" target="_blank" rel="noopener noreferrer" class="hover:text-brand-red">Facebook</a>
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-3 text-brand-red flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"></path>
              </svg>
              <a href="https://www.instagram.com/802soulkitchen/" target="_blank" rel="noopener noreferrer" class="hover:text-brand-red">Instagram</a>
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-3 text-brand-red flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
                <path d="M19.589 6.686a4.793 4.793 0 0 1-3.77-4.245V2h-3.445v13.672a2.896 2.896 0 0 1-5.201 1.743l-.002-.001.002.001a2.895 2.895 0 0 1 3.183-4.51v-3.5a6.329 6.329 0 0 0-1.183-.11C5.618 9.295 2 12.913 2 17.457 2 22.002 5.618 25.62 10.173 25.62c4.555 0 8.172-3.618 8.172-8.163V8.687a8.113 8.113 0 0 0 4.852 1.627v-3.628a4.8 4.8 0 0 1-3.608 0z"></path>
              </svg>
              <a href="https://www.tiktok.com/@802soulkitchenvt" target="_blank" rel="noopener noreferrer" class="hover:text-brand-red">TikTok</a>
            </div>
          </div>
        </div>

        <!-- Next Event -->
        <div class="text-brand-white">
          <h3 class="text-xl font-bold mb-4 text-brand-orange">Our Next Event</h3>
          <div id="sidebar-next-event" class="text-sm bg-brand-dark/50 p-3 rounded-lg border border-brand-orange/20">
            <!-- Next event will be dynamically loaded here -->
            <div class="text-brand-white/70 italic">
              <p>Loading next event...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Middle Content Area (Scrollable) -->
      <div class="flex-1 ml-80 mr-80 overflow-y-auto min-h-screen bg-brand-dark">
        <main class="p-8 space-y-12">
          <!-- About Section -->
          <section id="about" class="slide-in">
            <h2 class="text-3xl font-bold mb-6 gradient-text">Who We Are</h2>
            <div class="glass-effect p-8 rounded-xl shadow-2xl card-hover">
              <p class="mb-6 text-lg leading-relaxed">
                We are 802 Soul Kitchen, a pop-up food vendor with a passion for bringing unique and flavorful
                dishes to festivals, markets, and special events. We don't have a fixed location or a food
                truck because our home is where the event is! Our mission is to provide an unforgettable
                culinary experience that complements the vibrant atmosphere of every gathering we join.
              </p>
              <p class="text-lg leading-relaxed">
                Follow our schedule to find out where we'll be serving up our latest creations next!
              </p>
            </div>
          </section>

          <!-- Menu Section -->
          <section id="menu" class="slide-in">
            <h2 class="text-3xl font-bold mb-6 gradient-text">Our Menu</h2>
            <div id="menu-container" class="glass-effect p-8 rounded-xl shadow-2xl card-hover">
              <!-- Menu will be dynamically loaded here -->
            </div>
          </section>

          <!-- Catering Section -->
          <section id="catering" class="slide-in">
            <h2 class="text-3xl font-bold mb-6 gradient-text">Catering Services</h2>
            <div class="glass-effect p-8 rounded-xl shadow-2xl card-hover">
              <p class="mb-6 text-lg leading-relaxed">
                Planning a special event? Let 802 Soul Kitchen bring our signature flavors directly to your
                celebration! We cater private parties, corporate events, weddings, and gatherings of all sizes.
              </p>
              <div class="grid md:grid-cols-2 gap-6">
                <div>
                  <h3 class="text-xl font-bold text-brand-orange mb-3">What We Offer</h3>
                  <ul class="space-y-2 text-brand-white">
                    <li>• Custom menu planning</li>
                    <li>• Fresh, made-to-order dishes</li>
                    <li>• Professional service staff</li>
                    <li>• Flexible serving options</li>
                    <li>• Dietary accommodations</li>
                  </ul>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-brand-orange mb-3">Event Types</h3>
                  <ul class="space-y-2 text-brand-white">
                    <li>• Private parties</li>
                    <li>• Corporate events</li>
                    <li>• Weddings & receptions</li>
                    <li>• Family gatherings</li>
                    <li>• Community events</li>
                  </ul>
                </div>
              </div>
              <div class="mt-6 p-4 bg-brand-orange/20 rounded-lg">
                <p class="text-brand-white font-medium">
                  Contact us today to discuss your catering needs and get a custom quote!
                </p>
              </div>
            </div>
          </section>

          <!-- Find Us Section -->
          <section id="events" class="slide-in">
            <h2 class="text-3xl font-bold mb-6 gradient-text">Our Upcoming Events!</h2>
            <div id="events-list" class="space-y-6">
              <!-- Events will be dynamically loaded here -->
            </div>
          </section>
        </main>
      </div>

      <!-- Right Photo Column (Fixed) -->
      <div class="w-80 bg-brand-dark fixed right-0 top-0 h-screen p-4 overflow-y-auto z-20 border-l-4 border-brand-orange/30">
        <div id="photo-gallery" class="space-y-4">
          <h3 class="text-xl font-bold mb-4 text-brand-orange text-center">Our Kitchen</h3>
          <!-- Photos will be loaded here -->
          <div class="text-center text-brand-white/70 italic p-8">
            <p>Add photos to the PHOTOS folder to display them here</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <footer class="bg-brand-dark relative overflow-hidden mt-12 py-8 z-10">
      <div class="container mx-auto text-center text-brand-white relative z-10">
        <p class="text-lg font-medium">
          &copy; 2025 802 Soul Kitchen. All Rights Reserved.
        </p>
        <div class="mt-3 flex justify-center space-x-2">
          <span class="text-brand-orange">●</span>
          <span class="text-brand-white">Soul Food</span>
          <span class="text-brand-orange">●</span>
          <span class="text-brand-white">Pop-Up Events</span>
          <span class="text-brand-orange">●</span>
          <span class="text-brand-white">Vermont</span>
          <span class="text-brand-orange">●</span>
        </div>
      </div>
    </footer>

    <!-- Admin Floating Action Button -->
    <button type="button" id="admin-fab" class="fixed bottom-6 left-6 bg-brand-red text-white w-8 h-8 rounded-full shadow-2xl flex items-center justify-center z-50 hover:bg-brand-orange transition-all duration-300 floating pulse-animation" aria-label="Open admin panel">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
      </svg>
    </button>

    <!-- Admin Modal -->
    <div id="admin-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-40 p-4">
      <div class="bg-brand-white p-8 rounded-2xl shadow-2xl w-full max-w-lg border border-brand-orange/30 relative">
        <!-- Close Button -->
        <button type="button" id="modal-close-x-btn" class="absolute top-4 right-4 text-brand-dark hover:text-brand-red transition-colors p-1" aria-label="Close admin panel">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <!-- This is the container for the admin panel content -->
        <div id="admin-panel-content">
          <!-- Authentication -->
          <div id="auth-section">
            <h3 class="text-xl font-bold mb-4 text-brand-dark">Admin Login</h3>
            <div class="text-center">
              <button type="button" id="google-signin-btn" class="bg-white border-2 border-gray-300 text-gray-700 px-6 py-3 rounded-lg font-medium hover:bg-gray-50 transition-all duration-300 flex items-center justify-center w-full gap-3">
                <svg width="20" height="20" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                </svg>
                Sign in with Google
              </button>
              <p id="auth-error" class="text-red-500 mt-3 text-sm"></p>
            </div>
          </div>

          <!-- Admin Management Tabs -->
          <div id="admin-main-section" class="hidden">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold text-brand-dark">Admin Panel</h3>
              <div class="flex gap-2">
                <button type="button" id="logout-btn" class="bg-brand-dark text-brand-white px-4 py-2 rounded-lg hover:bg-brand-dark/80 transition-all duration-300">Logout</button>
                <button type="button" id="close-modal-btn" class="text-brand-dark hover:text-brand-red text-2xl transition-colors">&times;</button>
              </div>
            </div>

            <!-- Tab Navigation -->
            <div class="flex gap-2 mb-6">
              <button type="button" id="events-tab" class="tab-btn bg-brand-red text-white px-4 py-2 rounded-lg font-medium">Events</button>
              <button type="button" id="menu-tab" class="tab-btn bg-brand-dark/20 text-brand-dark px-4 py-2 rounded-lg font-medium">Menu</button>
            </div>

            <!-- Events Management -->
            <div id="events-management" class="tab-content">
              <div class="mb-4">
                <button type="button" id="add-event-btn" class="bg-brand-red text-white px-4 py-2 rounded-lg hover:bg-brand-orange transition-all">+ Add Event</button>
              </div>

              <!-- Event Form -->
              <div id="event-form" class="hidden mb-6 p-4 border border-brand-orange/30 rounded-lg bg-gray-50">
                <h4 class="font-bold text-brand-dark mb-4">Add/Edit Event</h4>
                <input type="hidden" id="event-id" />
                <div class="space-y-4">
                  <input type="text" id="event-name" placeholder="Event Name (e.g., Festival on the Green)" class="border-2 border-brand-orange/30 p-3 rounded-lg w-full focus:border-brand-red focus:ring-2 focus:ring-brand-red/20 transition-all text-brand-dark bg-white" />
                  <input type="text" id="event-location" placeholder="Location (e.g., City Park)" class="border-2 border-brand-orange/30 p-3 rounded-lg w-full focus:border-brand-red focus:ring-2 focus:ring-brand-red/20 transition-all text-brand-dark bg-white" />
                  <textarea id="event-description" placeholder="Short Description" class="border-2 border-brand-orange/30 p-3 rounded-lg w-full focus:border-brand-red focus:ring-2 focus:ring-brand-red/20 transition-all text-brand-dark bg-white" rows="2"></textarea>

                  <!-- Date/Time Entries -->
                  <div class="border-t pt-4">
                    <div class="flex justify-between items-center mb-3">
                      <h5 class="font-medium text-brand-dark">Event Dates & Times</h5>
                      <button type="button" id="add-datetime-btn" class="bg-brand-orange text-white px-3 py-1 rounded text-sm hover:bg-brand-red transition-all">+ Add Date/Time</button>
                    </div>
                    <div id="datetime-entries" class="space-y-3">
                      <!-- Date/time entries will be added here -->
                    </div>
                  </div>

                  <div class="flex gap-4 pt-4 border-t">
                    <button type="button" id="save-event-btn" class="bg-brand-red text-white px-4 py-2 rounded-lg hover:bg-brand-orange transition-all">Save Event</button>
                    <button type="button" id="cancel-event-btn" class="bg-brand-dark text-brand-white px-4 py-2 rounded-lg hover:bg-brand-dark/80 transition-all">Cancel</button>
                  </div>
                </div>
              </div>

              <!-- Events List -->
              <div class="bg-gray-50 border border-brand-orange/30 rounded-lg p-4">
                <h4 class="font-bold text-brand-dark mb-4">Current Events</h4>
                <div id="events-admin-list" class="max-h-80 overflow-y-auto">
                  <!-- Events will be dynamically loaded here for admin management -->
                </div>
              </div>
            </div>

            <!-- Menu Management -->
            <div id="menu-management" class="tab-content hidden">
              <div class="mb-4">
                <button type="button" id="add-menu-item-btn" class="bg-brand-red text-white px-4 py-2 rounded-lg hover:bg-brand-orange transition-all">+ Add Menu Item</button>
              </div>

              <!-- Menu Item Form -->
              <div id="menu-item-form" class="hidden mb-6 p-4 border border-brand-orange/30 rounded-lg bg-gray-50">
                <h4 class="font-bold text-brand-dark mb-4">Add/Edit Menu Item</h4>
                <input type="hidden" id="menu-item-id" />
                <div class="space-y-4">
                  <input type="text" id="menu-item-name" placeholder="Item Name" class="border-2 border-brand-orange/30 p-3 rounded-lg w-full focus:border-brand-red focus:ring-2 focus:ring-brand-red/20 transition-all text-brand-dark bg-white" />
                  <textarea id="menu-item-description" placeholder="Description (optional)" class="border-2 border-brand-orange/30 p-3 rounded-lg w-full focus:border-brand-red focus:ring-2 focus:ring-brand-red/20 transition-all text-brand-dark bg-white" rows="2"></textarea>
                  <select id="menu-item-category" aria-label="Menu item category" class="border-2 border-brand-orange/30 p-3 rounded-lg w-full focus:border-brand-red focus:ring-2 focus:ring-brand-red/20 transition-all text-brand-dark bg-white">
                    <option value="">Select Category</option>
                    <option value="Mains">Mains</option>
                    <option value="Combos">Combos</option>
                    <option value="Sides">Sides</option>
                    <option value="Drinks">Drinks</option>
                    <option value="Dessert">Dessert</option>
                  </select>
                  <input type="number" id="menu-item-order" placeholder="Display Order" class="border-2 border-brand-orange/30 p-3 rounded-lg w-full focus:border-brand-red focus:ring-2 focus:ring-brand-red/20 transition-all text-brand-dark bg-white" />
                  <div class="flex gap-4">
                    <button type="button" id="save-menu-item-btn" class="bg-brand-red text-white px-4 py-2 rounded-lg hover:bg-brand-orange transition-all">Save Item</button>
                    <button type="button" id="cancel-menu-item-btn" class="bg-brand-dark text-brand-white px-4 py-2 rounded-lg hover:bg-brand-dark/80 transition-all">Cancel</button>
                  </div>
                </div>
              </div>

              <!-- Menu Items List -->
              <div class="bg-gray-50 border border-brand-orange/30 rounded-lg p-4">
                <h4 class="font-bold text-brand-dark mb-4">Current Menu Items</h4>
                <div id="menu-items-list" class="max-h-80 overflow-y-auto">
                  <!-- Menu items will be dynamically loaded here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
  // Simple script to test if JavaScript is working at all
  console.log('🚀 BASIC SCRIPT STARTING - THIS SHOULD ALWAYS SHOW');
  alert('JavaScript is working! Check console for detailed logs.');
  </script>

  <script type="module">
  // Firebase script from original script.js - now using CDN imports
  console.log('🔥 Firebase script starting...');

  // Debug: Check if elements exist
  console.log('🔍 Debug: Checking elements...');
  console.log('admin-fab:', document.getElementById('admin-fab'));
  console.log('photo-gallery:', document.getElementById('photo-gallery'));
  console.log('events-list:', document.getElementById('events-list'));

  // Test admin button immediately (before Firebase)
  const adminFab = document.getElementById('admin-fab');
  const adminModal = document.getElementById('admin-modal');

  if (adminFab && adminModal) {
    console.log('✅ Admin elements found, setting up click handler...');
    adminFab.addEventListener('click', () => {
      console.log('🖱️ Admin button clicked!');
      adminModal.classList.remove('hidden');
    });

    // Close modal handlers
    const closeModalBtn = document.getElementById('close-modal-btn');
    const modalCloseXBtn = document.getElementById('modal-close-x-btn');

    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', () => {
        adminModal.classList.add('hidden');
      });
    }

    if (modalCloseXBtn) {
      modalCloseXBtn.addEventListener('click', () => {
        adminModal.classList.add('hidden');
      });
    }
  } else {
    console.error('❌ Admin elements not found!');
  }

  // Test photo gallery immediately
  const photoGallery = document.getElementById('photo-gallery');
  if (photoGallery) {
    console.log('✅ Photo gallery found, testing image loading...');

    // Test loading a single image to verify photos work
    const testImg = new Image();
    testImg.onload = () => {
      console.log('✅ Test image loaded successfully');
      // Photos will be loaded later in the initialization sequence
    };
    testImg.onerror = () => {
      console.error('❌ Test image failed to load');
    };
    testImg.src = '/photos/1.jpg';
  } else {
    console.error('❌ Photo gallery element not found!');
  }

  try {
    console.log('📥 Starting Firebase imports...');
    const { initializeApp } = await import('https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js');
    console.log('✅ Firebase App imported');

    const { getFirestore, collection, onSnapshot, doc, addDoc, updateDoc, deleteDoc, getDoc, query, orderBy, getDocs } = await import('https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js');
    console.log('✅ Firebase Firestore imported');

    const { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged } = await import('https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js');
    console.log('✅ Firebase Auth imported');

    console.log('✅ All Firebase modules imported successfully');

    // Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyDvGG5PnYpksQRzk8RvZ7Lyc8FaxwM-kG4",
      authDomain: "soulkitchen-9e6b2.firebaseapp.com",
      projectId: "soulkitchen-9e6b2",
      storageBucket: "soulkitchen-9e6b2.firebasestorage.app",
      messagingSenderId: "370735557737",
      appId: "1:370735557737:web:f08d5a4052e12b5a7f06f8",
      measurementId: "G-4XNBK7TP6J"
    };

    // Initialize Firebase
    console.log('🔧 Initializing Firebase...');
    const app = initializeApp(firebaseConfig);
    console.log('✅ Firebase app initialized');

    const db = getFirestore(app);
    console.log('✅ Firestore initialized');

    const auth = getAuth(app);
    console.log('✅ Auth initialized');
    const provider = new GoogleAuthProvider();

    // Load menu items from Firestore
    const menuContainer = document.getElementById('menu-container');
    const menuCollection = collection(db, "menu");

    onSnapshot(menuCollection, (snapshot) => {
      const items = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

      // Sort items by category order and then by item order
      const categoryOrder = ['Mains', 'Combos', 'Sides', 'Drinks', 'Dessert'];
      items.sort((a, b) => {
        if (a.category !== b.category) {
          return categoryOrder.indexOf(a.category) - categoryOrder.indexOf(b.category);
        }
        return (a.order || 0) - (b.order || 0);
      });

      // Group items by category
      const categorizedItems = {};
      categoryOrder.forEach(category => {
        categorizedItems[category] = items.filter(item => item.category === category);
      });

      let menuHTML = '<div class="menu-grid">';
      categoryOrder.forEach(category => {
        if (categorizedItems[category] && categorizedItems[category].length > 0) {
          menuHTML += `<div class="menu-category">
            <h3 class="text-xl font-bold mb-4 text-brand-orange">${category}</h3>
            <ul class="menu-bullet-list">`;

          categorizedItems[category].forEach(item => {
            menuHTML += `<li class="menu-bullet-item">• <strong class="text-brand-white">${item.name}</strong>`;
            if (item.description) {
              menuHTML += `<br><span class="text-brand-white/80 text-sm ml-3">${item.description}</span>`;
            }
            menuHTML += '</li>';
          });

          menuHTML += '</ul></div>';
        }
      });
      menuHTML += '</div>';

      if (items.length === 0) {
        menuHTML = '<p class="text-brand-white text-center">No menu items available.</p>';
      }

      menuContainer.innerHTML = menuHTML;
    });

    // Initialize full admin panel script from original script.js
    // This is all the admin functionality from the original
    const AUTHORIZED_ADMINS = [
      "802soulkitchen@gmail.com",
      "scottkunian@gmail.com"
    ];
    let loggedIn = false;
    let currentUser = null;
    let currentEvents = [];
    let galleryInterval = null;

    const adminFab = document.getElementById('admin-fab');
    const adminModal = document.getElementById('admin-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const modalCloseXBtn = document.getElementById('modal-close-x-btn');

    const authSection = document.getElementById('auth-section');
    const adminMainSection = document.getElementById('admin-main-section');
    const googleSigninBtn = document.getElementById('google-signin-btn');
    const logoutBtn = document.getElementById('logout-btn');
    const authError = document.getElementById('auth-error');

    adminFab.addEventListener('click', () => {
      adminModal.classList.remove('hidden');
    });

    closeModalBtn.addEventListener('click', () => {
      adminModal.classList.add('hidden');
    });

    modalCloseXBtn.addEventListener('click', () => {
      adminModal.classList.add('hidden');
    });

    adminModal.addEventListener('click', (e) => {
      if (e.target === adminModal) {
        adminModal.classList.add('hidden');
      }
    });

    // Authentication state management
    const isAuthorizedAdmin = (user) => {
      return user && AUTHORIZED_ADMINS.includes(user.email);
    };

    onAuthStateChanged(auth, (user) => {
      currentUser = user;
      if (isAuthorizedAdmin(user)) {
        loggedIn = true;
        authError.textContent = '';
        authSection.classList.add('hidden');
        adminMainSection.classList.remove('hidden');
        document.getElementById('modal-close-x-btn').style.display = 'none';
        showEventsTab();
        renderEvents(currentEvents);
        renderEventsAdmin(currentEvents);
        loadMenuItems();
      } else {
        loggedIn = false;
        authSection.classList.remove('hidden');
        adminMainSection.classList.add('hidden');
        document.getElementById('modal-close-x-btn').style.display = 'block';
        renderEvents(currentEvents);
        if (user && !isAuthorizedAdmin(user)) {
          authError.textContent = `Access denied. "${user.email}" is not authorized.`;
        }
      }
    });

    googleSigninBtn.addEventListener('click', async () => {
      try {
        authError.textContent = '';
        await signInWithPopup(auth, provider);
      } catch (error) {
        console.error('Sign-in error:', error);
        authError.textContent = 'Sign-in failed. Please try again.';
      }
    });

    logoutBtn.addEventListener('click', async () => {
      try {
        await signOut(auth);
        adminModal.classList.remove('hidden');
      } catch (error) {
        console.error('Sign-out error:', error);
      }
    });

    // Tab Management
    const eventsTab = document.getElementById('events-tab');
    const menuTab = document.getElementById('menu-tab');
    const eventsManagement = document.getElementById('events-management');
    const menuManagement = document.getElementById('menu-management');

    function showEventsTab() {
      eventsTab.classList.remove('bg-brand-dark/20', 'text-brand-dark');
      eventsTab.classList.add('bg-brand-red', 'text-white');
      menuTab.classList.remove('bg-brand-red', 'text-white');
      menuTab.classList.add('bg-brand-dark/20', 'text-brand-dark');

      eventsManagement.classList.remove('hidden');
      menuManagement.classList.add('hidden');
    }

    function showMenuTab() {
      menuTab.classList.remove('bg-brand-dark/20', 'text-brand-dark');
      menuTab.classList.add('bg-brand-red', 'text-white');
      eventsTab.classList.remove('bg-brand-red', 'text-white');
      eventsTab.classList.add('bg-brand-dark/20', 'text-brand-dark');

      menuManagement.classList.remove('hidden');
      eventsManagement.classList.add('hidden');
    }

    eventsTab.addEventListener('click', showEventsTab);
    menuTab.addEventListener('click', showMenuTab);

    // Add Menu Item button handler
    const addMenuItemBtn = document.getElementById('add-menu-item-btn');
    addMenuItemBtn.addEventListener('click', () => {
      const menuItemForm = document.getElementById('menu-item-form');
      if (menuItemForm.classList.contains('hidden')) {
        menuItemForm.classList.remove('hidden');
        addMenuItemBtn.textContent = 'Cancel';
      } else {
        menuItemForm.classList.add('hidden');
        addMenuItemBtn.textContent = '+ Add Menu Item';
        // Clear form
        document.getElementById('menu-item-name').value = '';
        document.getElementById('menu-item-description').value = '';
        document.getElementById('menu-item-category').value = 'Mains';
        document.getElementById('menu-item-order').value = '';
        document.getElementById('menu-item-id').value = '';
      }
    });

    // Save Menu Item button handler
    const saveMenuItemBtn = document.getElementById('save-menu-item-btn');
    saveMenuItemBtn.addEventListener('click', async () => {
      console.log('💾 Save menu item clicked');

      const name = document.getElementById('menu-item-name').value.trim();
      const description = document.getElementById('menu-item-description').value.trim();
      const category = document.getElementById('menu-item-category').value;
      const order = parseInt(document.getElementById('menu-item-order').value) || 0;
      const id = document.getElementById('menu-item-id').value;

      if (!name) {
        alert('Please enter a menu item name');
        return;
      }

      try {
        const menuData = {
          name,
          description,
          category,
          order
        };

        if (id) {
          // Update existing item
          console.log('📝 Updating menu item:', id);
          const docRef = doc(db, 'menu', id);
          await updateDoc(docRef, menuData);
          console.log('✅ Menu item updated');
        } else {
          // Add new item
          console.log('➕ Adding new menu item');
          await addDoc(collection(db, 'menu'), menuData);
          console.log('✅ Menu item added');
        }

        // Hide form and reset
        document.getElementById('menu-item-form').classList.add('hidden');
        addMenuItemBtn.textContent = '+ Add Menu Item';

        // Clear form
        document.getElementById('menu-item-name').value = '';
        document.getElementById('menu-item-description').value = '';
        document.getElementById('menu-item-category').value = 'Mains';
        document.getElementById('menu-item-order').value = '';
        document.getElementById('menu-item-id').value = '';

      } catch (error) {
        console.error('❌ Error saving menu item:', error);
        alert('Error saving menu item: ' + error.message);
      }
    });

    // Save Event button handler - COPIED EXACTLY FROM WORKING script.js
    const saveEventBtn = document.getElementById('save-event-btn');
    saveEventBtn.addEventListener('click', async () => {
        if (!loggedIn) {
            alert("Please log in first.");
            return;
        }

        // Create simple placeholder date/time data for now
        const today = new Date().toISOString().split('T')[0];
        const dateTimeData = [{
            date: today,
            startTime: '12:00',
            endTime: '13:00'
        }];

        const eventNameInput = document.getElementById('event-name');
        const eventLocationInput = document.getElementById('event-location');
        const eventDescriptionInput = document.getElementById('event-description');
        const eventIdInput = document.getElementById('event-id');

        if (!eventNameInput.value || !eventLocationInput.value || dateTimeData.length === 0) {
            alert('Please fill in the event name, location, and at least one date.');
            return;
        }

        const eventData = {
            name: eventNameInput.value,
            location: eventLocationInput.value,
            description: eventDescriptionInput.value,
            dateTimes: dateTimeData,
            // Keep first date for sorting compatibility
            date: dateTimeData[0].date
        };

        const id = eventIdInput.value;

        try {
            if (id) {
                // Update existing event
                const eventDoc = doc(db, "events", id);
                await updateDoc(eventDoc, eventData);
            } else {
                // Add new event
                await addDoc(collection(db, "events"), eventData);
            }

            // Clear form and hide
            document.getElementById('event-form').classList.add('hidden');
            document.getElementById('add-event-btn').textContent = '+ Add Event';
            eventNameInput.value = '';
            eventLocationInput.value = '';
            eventDescriptionInput.value = '';
            eventIdInput.value = '';

        } catch (error) {
            console.error("Error saving event: ", error);
            alert("There was an error saving the event.");
        }
    });

    // Firebase Events and Menu functionality
    const eventsCollection = collection(db, "events");
    const eventsList = document.getElementById('events-list');

    // Load events from Firestore
    const loadEvents = () => {
      console.log('📅 Loading events from Firestore...');
      // Remove orderBy since documents don't have 'order' field
      onSnapshot(eventsCollection, (snapshot) => {
        console.log(`📅 Events snapshot received: ${snapshot.docs.length} events`);
        currentEvents = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        console.log('📅 Current events:', currentEvents);
        renderEvents(currentEvents);
        if (loggedIn) {
          renderEventsAdmin(currentEvents);
        }
      }, (error) => {
        console.error('❌ Error loading events:', error);
      });
    };

    // Test Firebase connection first
    console.log('🧪 Testing Firebase connection...');
    const testCollection = collection(db, 'events');
    getDocs(testCollection).then(snapshot => {
      console.log(`🧪 Firebase test successful: found ${snapshot.docs.length} documents`);
      if (snapshot.docs.length > 0) {
        console.log('🧪 Sample document:', snapshot.docs[0].data());
      }

      // Initialize events loading after successful test
      loadEvents();
    }).catch(error => {
      console.error('🧪 Firebase test failed:', error);
      // Try to load events anyway
      loadEvents();
    });

    // Load menu items function
    const loadMenuItems = () => {
      // Remove orderBy since documents don't have 'order' field
      onSnapshot(collection(db, 'menu'), (snapshot) => {
        const menuItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        if (loggedIn) {
          renderMenuAdmin(menuItems);
        }
      });
    };

    // Helper function to check if event is still active/future
    const isEventActive = (event) => {
      const now = new Date();
      console.log(`🔍 Checking event activity for: ${event.title || 'Unnamed Event'}`);
      console.log(`🕐 Current time: ${now.toISOString()}`);

      return event.dateTimes.some(dt => {
        const eventDate = new Date(dt.date + 'T00:00:00');
        console.log(`📅 Event date: ${dt.date}, Start: ${dt.startTime}, End: ${dt.endTime}`);

        if (dt.endTime) {
          // If there's an end time, event is active until end time
          const [hours, minutes] = dt.endTime.split(':').map(Number);
          eventDate.setHours(hours, minutes, 0, 0);
          const isActive = eventDate > now;
          console.log(`⏰ End time check: ${eventDate.toISOString()} > ${now.toISOString()} = ${isActive}`);
          return isActive;
        } else if (dt.startTime) {
          // If only start time, show event for the whole day it starts
          // Check if it's the same day and past start time, or a future day
          const [hours, minutes] = dt.startTime.split(':').map(Number);
          const eventStart = new Date(eventDate);
          eventStart.setHours(hours, minutes, 0, 0);
          const eventEndOfDay = new Date(eventDate);
          eventEndOfDay.setHours(23, 59, 59, 999);

          const isActive = now >= eventStart && now <= eventEndOfDay;
          console.log(`📍 Start time check: ${eventStart.toISOString()} <= ${now.toISOString()} <= ${eventEndOfDay.toISOString()} = ${isActive}`);
          return isActive || eventDate > now;
        } else {
          // No specific time, show all day
          eventDate.setHours(23, 59, 59, 999);
          const isActive = eventDate >= now;
          console.log(`📆 All day check: ${eventDate.toISOString()} >= ${now.toISOString()} = ${isActive}`);
          return isActive;
        }
      });
    };

    // Render sidebar next event
    const renderSidebarNextEvent = (events) => {
      const sidebarNextEvent = document.getElementById('sidebar-next-event');
      if (!sidebarNextEvent) return;

      const activeEvents = events.filter(isEventActive);
      if (activeEvents.length === 0) {
        sidebarNextEvent.innerHTML = `
          <div class="text-brand-white/70 italic">
            <p>No upcoming events scheduled.</p>
          </div>
        `;
        return;
      }

      const nextEvent = activeEvents[0];
      let dateTimeHTML = '';
      if (nextEvent.dateTimes && nextEvent.dateTimes.length > 0) {
        const firstDateTime = nextEvent.dateTimes[0];
        const eventDate = new Date(firstDateTime.date + 'T00:00:00');
        const formattedDate = eventDate.toLocaleDateString('en-US', {
          weekday: 'short',
          month: 'short',
          day: 'numeric'
        });

        dateTimeHTML = `
          <div class="flex items-center mb-2">
            <svg class="w-4 h-4 mr-2 text-brand-red flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <span class="font-medium">${formattedDate}</span>
            ${firstDateTime.startTime && firstDateTime.endTime ?
              `<span class="text-brand-orange ml-2">${firstDateTime.startTime}-${firstDateTime.endTime}</span>` :
              firstDateTime.time ? `<span class="text-brand-orange ml-2">${firstDateTime.time}</span>` : ''
            }
          </div>
        `;
      }

      sidebarNextEvent.innerHTML = `
        <div class="bg-brand-dark/50 p-3 rounded-lg border border-brand-orange/20">
          <h4 class="font-bold text-brand-white mb-2">${nextEvent.name}</h4>
          ${dateTimeHTML}
          <div class="flex items-start mb-2">
            <svg class="w-4 h-4 mr-2 mt-0.5 text-brand-red flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <span class="text-brand-white/90">${nextEvent.location}</span>
          </div>
          ${nextEvent.description ? `<p class="text-brand-white/80 text-xs leading-relaxed">${nextEvent.description}</p>` : ''}
        </div>
      `;
    };

    // Render events from Firestore
    const renderEvents = (events) => {
      console.log(`🎨 Rendering ${events.length} events`);
      const activeEvents = events.filter(isEventActive);
      console.log(`🎨 Active events: ${activeEvents.length}`);
      renderSidebarNextEvent(events);

      if (!eventsList) {
        console.error('❌ Events list element not found!');
        return;
      }

      eventsList.innerHTML = '';
      if (activeEvents.length === 0) {
         console.log('📅 No active events, showing placeholder');
         eventsList.innerHTML = `<div class="glass-effect p-8 rounded-xl shadow-2xl text-center text-brand-white card-hover">
          <p class="text-lg font-medium">No upcoming events scheduled right now. Check back soon!</p>
        </div>`;
        return;
      }

      activeEvents.forEach((event, index) => {
        const eventElement = document.createElement('div');
        eventElement.className = 'glass-effect p-8 rounded-xl shadow-2xl card-hover slide-in';
        eventElement.style.animationDelay = `${index * 0.1}s`;

        let dateTimeHTML = '';
        if (event.dateTimes && event.dateTimes.length > 0) {
          event.dateTimes.forEach(dt => {
            const eventDate = new Date(dt.date + 'T00:00:00');
            const formattedDate = eventDate.toLocaleDateString('en-US', {
              weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
            });

            dateTimeHTML += `
              <div class="flex items-center text-lg text-brand-white font-medium mb-2">
                <div class="w-8 h-8 mr-3 flex items-center justify-center bg-brand-red/10 rounded-lg">
                  <svg class="w-5 h-5 text-brand-red" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                </div>
                <span>${formattedDate}</span>
                ${dt.startTime || dt.endTime ?
                  `<span class="text-brand-orange font-medium ml-4">
                    ${dt.startTime || ''}${dt.startTime && dt.endTime ? ' - ' : ''}${dt.endTime || ''}
                  </span>` :
                  dt.time ? `<span class="text-brand-orange font-medium ml-4">${dt.time}</span>` : ''
                }
              </div>
            `;
          });
        }

        eventElement.innerHTML = `
          <h3 class="text-2xl font-bold mb-4 text-brand-orange">${event.name}</h3>
          <div class="mt-4 space-y-3">
            ${dateTimeHTML}
            <div class="flex items-center text-lg text-brand-white font-semibold">
              <div class="w-8 h-8 flex items-center justify-center bg-brand-dark/10 rounded-lg">
                <svg class="w-5 h-5 text-brand-dark" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
              </div>
              <div class="flex items-center flex-1 -ml-5">
                <span><span class="text-brand-red">Location:</span> ${event.location}</span>
                <a href="https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(event.location)}" target="_blank" class="ml-4 bg-brand-red/20 hover:bg-brand-red text-brand-red hover:text-white px-3 py-1 rounded-lg text-sm font-medium transition-all duration-300 flex items-center gap-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3l6-3"></path></svg>
                  Directions
                </a>
              </div>
            </div>
          </div>
          ${event.description ? `<div class="mt-3 p-4 bg-brand-orange/20 rounded-lg">
            <p class="text-brand-white font-medium leading-relaxed">${event.description}</p>
          </div>` : ''}
        `;

        eventsList.appendChild(eventElement);
      });
    };

    // Photo gallery functionality
    let availablePhotos = [];
    let currentPhotoIndex = 0;
    const photosPerPage = 6;

    const loadAvailablePhotos = async () => {
      availablePhotos = [];
      const knownImages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];

      for (const imageNum of knownImages) {
        const extensions = ['jpg', 'jpeg', 'png'];
        for (const ext of extensions) {
          const imagePath = `/photos/${imageNum}.${ext}`;

          try {
            const response = await fetch(imagePath, { method: 'HEAD' });
            if (response.ok) {
              availablePhotos.push({
                number: imageNum,
                path: imagePath,
                format: ext
              });
              break;
            }
          } catch (e) {
            // Image doesn't exist, continue
          }
        }
      }

      if (availablePhotos.length > 0) {
        initializePhotoGallery();
      }
    };

    const displayPhotos = (startIndex = 0) => {
      const photoGallery = document.getElementById('photo-gallery');
      if (!photoGallery || availablePhotos.length === 0) return;

      const allContainers = photoGallery.querySelectorAll('.photos-container');
      if (allContainers.length > 1) {
        allContainers.forEach((c, i) => { if (i < allContainers.length - 1) c.remove(); });
      }

      const header = photoGallery.querySelector('h3');
      const existingPhotosContainer = photoGallery.querySelector('.photos-container');

      const photosToShow = [];
      for (let i = 0; i < photosPerPage && i < availablePhotos.length; i++) {
        const photoIndex = (startIndex + i) % availablePhotos.length;
        photosToShow.push(availablePhotos[photoIndex]);
      }

      const newPhotosContainer = document.createElement('div');
      newPhotosContainer.className = 'space-y-4 photos-container opacity-0 transition-all duration-1000 ease-in-out';

      photosToShow.forEach((photoInfo, index) => {
        const photoDiv = document.createElement('div');
        photoDiv.className = 'rounded-lg overflow-hidden shadow-lg hover:scale-105 transition-all duration-500 card-hover transform translate-y-4 opacity-0';
        photoDiv.style.transitionDelay = `${index * 150}ms`;

        const img = document.createElement('img');
        img.src = photoInfo.path;
        img.alt = '802 Soul Kitchen - Delicious Soul Food';
        img.className = 'w-full h-48 object-cover transition-all duration-700';
        img.loading = 'lazy';

        photoDiv.appendChild(img);
        newPhotosContainer.appendChild(photoDiv);
      });

      if (existingPhotosContainer) {
        newPhotosContainer.style.position = 'absolute';
        newPhotosContainer.style.top = '0';
        newPhotosContainer.style.left = '0';
        newPhotosContainer.style.right = '0';
        newPhotosContainer.style.zIndex = '1';

        existingPhotosContainer.style.position = 'relative';
        existingPhotosContainer.style.zIndex = '2';

        photoGallery.appendChild(newPhotosContainer);

        requestAnimationFrame(() => {
          newPhotosContainer.classList.remove('opacity-0');
          newPhotosContainer.classList.add('opacity-100');

          const existingPhotos = existingPhotosContainer.querySelectorAll('.card-hover');
          existingPhotos.forEach((photo, index) => {
            setTimeout(() => {
              photo.style.transition = 'all 0.8s cubic-bezier(0.4, 0, 0.2, 1)';
              photo.style.opacity = '0';
              photo.style.transform = 'translateY(-20px) scale(0.95)';
              photo.style.filter = 'blur(8px)';
            }, index * 100);
          });

          const newPhotos = newPhotosContainer.querySelectorAll('.card-hover');
          newPhotos.forEach((photo, index) => {
            setTimeout(() => {
              photo.classList.remove('opacity-0', 'translate-y-4');
              photo.classList.add('opacity-100', 'translate-y-0');
            }, 1500 + index * 150);
          });

          setTimeout(() => {
            if (existingPhotosContainer.parentNode) {
              existingPhotosContainer.remove();
              newPhotosContainer.style.position = 'static';
              newPhotosContainer.style.zIndex = 'auto';
            }
          }, 4000);
        });
      } else {
        photoGallery.innerHTML = '';
        if (header) photoGallery.appendChild(header);
        photoGallery.appendChild(newPhotosContainer);

        setTimeout(() => {
          newPhotosContainer.classList.remove('opacity-0');
          newPhotosContainer.classList.add('opacity-100');

          const photos = newPhotosContainer.querySelectorAll('.card-hover');
          photos.forEach((photo, index) => {
            setTimeout(() => {
              photo.classList.remove('opacity-0', 'translate-y-4');
              photo.classList.add('opacity-100', 'translate-y-0');
            }, index * 250 + 200);
          });
        }, 100);
      }
    };

    const initializePhotoGallery = () => {
      displayPhotos(0);

      if (galleryInterval) {
        clearInterval(galleryInterval);
        galleryInterval = null;
      }

      if (availablePhotos.length > photosPerPage) {
        galleryInterval = setInterval(() => {
          currentPhotoIndex = (currentPhotoIndex + photosPerPage) % availablePhotos.length;
          displayPhotos(currentPhotoIndex);
        }, 8000);
      }
    };

    // Load photo gallery
    loadAvailablePhotos();

    // Pause gallery interval when tab is hidden
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        if (galleryInterval) {
          clearInterval(galleryInterval);
          galleryInterval = null;
        }
      } else {
        if (!galleryInterval && availablePhotos.length > photosPerPage) {
          galleryInterval = setInterval(() => {
            currentPhotoIndex = (currentPhotoIndex + photosPerPage) % availablePhotos.length;
            displayPhotos(currentPhotoIndex);
          }, 8000);
        }
      }
    });

    // Admin functionality - Google Auth

    const checkAuthState = () => {
      const auth = getAuth();
      onAuthStateChanged(auth, (user) => {
        currentUser = user;
        const adminBtn = document.getElementById('admin-btn');
        const adminModal = document.getElementById('admin-modal');

        if (user) {
          console.log('✅ User signed in:', user.email);
          if (adminBtn) adminBtn.style.display = 'block';
          loadAdminData();
        } else {
          console.log('❌ User signed out');
          if (adminBtn) adminBtn.style.display = 'none';
          if (adminModal) adminModal.classList.add('hidden');
        }
      });
    };

    // Google Sign In
    const signInWithGoogle = async () => {
      try {
        const auth = getAuth();
        const provider = new GoogleAuthProvider();
        const result = await signInWithPopup(auth, provider);
        console.log('✅ Google sign in successful:', result.user.email);
      } catch (error) {
        console.error('❌ Google sign in failed:', error);
        alert('Sign in failed: ' + error.message);
      }
    };

    // Sign Out
    const signOutUser = async () => {
      try {
        const auth = getAuth();
        await signOut(auth);
        console.log('✅ User signed out');
      } catch (error) {
        console.error('❌ Sign out failed:', error);
      }
    };

    // Load admin data
    const loadAdminData = async () => {
      try {
        // Remove orderBy since documents don't have 'order' field
        const eventsCollection = collection(db, 'events');
        const menuCollection = collection(db, 'menu');

        const [eventsSnapshot, menuSnapshot] = await Promise.all([
          getDocs(eventsCollection),
          getDocs(menuCollection)
        ]);

        const events = eventsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        const menuItems = menuSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

        renderEventsAdmin(events);
        renderMenuAdmin(menuItems);
      } catch (error) {
        console.error('❌ Failed to load admin data:', error);
      }
    };

    // Render events for admin
    const renderEventsAdmin = (events) => {
      const container = document.getElementById('events-admin-list');
      if (!container) return;

      container.innerHTML = events.map(event => `
        <div class="bg-brand-dark/30 p-4 rounded-lg border border-brand-orange/20 mb-3">
          <div class="flex justify-between items-start mb-2">
            <h4 class="font-bold text-brand-white">${event.name}</h4>
            <div class="flex gap-2">
              <button onclick="editEvent('${event.id}')" class="text-brand-orange hover:text-brand-white text-sm">Edit</button>
              <button onclick="deleteEvent('${event.id}')" class="text-brand-red hover:text-white text-sm">Delete</button>
            </div>
          </div>
          <p class="text-brand-white/70 text-sm mb-1">${event.location}</p>
          ${event.description ? `<p class="text-brand-white/60 text-xs">${event.description}</p>` : ''}
          ${event.dateTimes ? `<p class="text-brand-orange text-xs mt-2">${event.dateTimes.length} date(s)</p>` : ''}
        </div>
      `).join('');
    };

    // Render menu for admin
    const renderMenuAdmin = (menuItems) => {
      const container = document.getElementById('menu-items-list');
      if (!container) return;

      const categorized = {};
      menuItems.forEach(item => {
        if (!categorized[item.category]) categorized[item.category] = [];
        categorized[item.category].push(item);
      });

      container.innerHTML = Object.entries(categorized).map(([category, items]) => `
        <div class="mb-4">
          <h4 class="font-bold text-brand-orange mb-2">${category}</h4>
          ${items.map(item => `
            <div class="bg-brand-dark/30 p-3 rounded border border-brand-orange/20 mb-2">
              <div class="flex justify-between items-start">
                <div>
                  <span class="text-brand-white font-medium">${item.name}</span>
                  ${item.description ? `<p class="text-brand-white/70 text-sm">${item.description}</p>` : ''}
                </div>
                <div class="flex gap-2">
                  <button onclick="editMenuItem('${item.id}')" class="text-brand-orange hover:text-brand-white text-sm">Edit</button>
                  <button onclick="deleteMenuItem('${item.id}')" class="text-brand-red hover:text-white text-sm">Delete</button>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `).join('');
    };

    // Event CRUD operations
    window.addEvent = async () => {
      const form = document.getElementById('event-form');
      const formData = new FormData(form);

      const dateTimes = [];
      const dateInputs = form.querySelectorAll('.date-time-group');
      dateInputs.forEach(group => {
        const date = group.querySelector('input[name="event-date"]').value;
        const startTime = group.querySelector('input[name="event-start-time"]').value;
        const endTime = group.querySelector('input[name="event-end-time"]').value;

        if (date) {
          dateTimes.push({
            date,
            startTime: startTime || null,
            endTime: endTime || null
          });
        }
      });

      try {
        await addDoc(collection(db, 'events'), {
          name: formData.get('event-name'),
          location: formData.get('event-location'),
          description: formData.get('event-description'),
          dateTimes: dateTimes,
          order: Date.now()
        });

        form.reset();
        loadAdminData();
        loadEvents();
        alert('Event added successfully!');
      } catch (error) {
        console.error('❌ Failed to add event:', error);
        alert('Failed to add event: ' + error.message);
      }
    };

    window.editEvent = async (eventId) => {
      console.log('📝 Editing event:', eventId);

      try {
        // Get the event data from Firestore
        const docRef = doc(db, 'events', eventId);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
          const data = docSnap.data();

          // Show the events tab and form
          showEventsTab();
          document.getElementById('event-form').classList.remove('hidden');
          document.getElementById('add-event-btn').textContent = 'Cancel';

          // Populate the form fields
          document.getElementById('event-id').value = eventId;
          document.getElementById('event-name').value = data.name || '';
          document.getElementById('event-location').value = data.location || '';
          document.getElementById('event-description').value = data.description || '';

          // TODO: Populate date/time entries if they exist
          // This would require implementing the date/time form functionality

          console.log('✅ Event loaded for editing');
        } else {
          alert('Event not found');
        }
      } catch (error) {
        console.error('❌ Error loading event:', error);
        alert('Error loading event: ' + error.message);
      }
    };

    window.deleteEvent = async (eventId) => {
      if (!confirm('Are you sure you want to delete this event?')) return;

      try {
        await deleteDoc(doc(db, 'events', eventId));
        loadAdminData();
        loadEvents();
        alert('Event deleted successfully!');
      } catch (error) {
        console.error('❌ Failed to delete event:', error);
        alert('Failed to delete event: ' + error.message);
      }
    };

    // Menu CRUD operations
    window.addMenuItem = async () => {
      const form = document.getElementById('menu-item-form');
      const formData = new FormData(form);

      try {
        await addDoc(collection(db, 'menu'), {
          name: formData.get('menu-name'),
          description: formData.get('menu-description'),
          category: formData.get('menu-category'),
          order: Date.now()
        });

        form.reset();
        loadAdminData();
        alert('Menu item added successfully!');
      } catch (error) {
        console.error('❌ Failed to add menu item:', error);
        alert('Failed to add menu item: ' + error.message);
      }
    };

    window.editMenuItem = async (itemId) => {
      console.log('📝 Editing menu item:', itemId);

      try {
        // Get the menu item data from Firestore
        const docRef = doc(db, 'menu', itemId);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
          const data = docSnap.data();

          // Show the menu tab and form
          showMenuTab();
          document.getElementById('menu-item-form').classList.remove('hidden');
          document.getElementById('add-menu-item-btn').textContent = 'Cancel';

          // Populate the form fields
          document.getElementById('menu-item-id').value = itemId;
          document.getElementById('menu-item-name').value = data.name || '';
          document.getElementById('menu-item-description').value = data.description || '';
          document.getElementById('menu-item-category').value = data.category || 'Mains';
          document.getElementById('menu-item-order').value = data.order || '';

          console.log('✅ Menu item loaded for editing');
        } else {
          alert('Menu item not found');
        }
      } catch (error) {
        console.error('❌ Error loading menu item:', error);
        alert('Error loading menu item: ' + error.message);
      }
    };

    window.deleteMenuItem = async (itemId) => {
      if (!confirm('Are you sure you want to delete this menu item?')) return;

      try {
        await deleteDoc(doc(db, 'menu', itemId));
        loadAdminData();
        alert('Menu item deleted successfully!');
      } catch (error) {
        console.error('❌ Failed to delete menu item:', error);
        alert('Failed to delete menu item: ' + error.message);
      }
    };

    // Add date/time group for events
    window.addDateTimeGroup = () => {
      const container = document.getElementById('datetime-entries');
      const groupDiv = document.createElement('div');
      groupDiv.className = 'date-time-group bg-brand-dark/20 p-3 rounded border border-brand-orange/30 mb-3';
      groupDiv.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
          <div>
            <label class="block text-brand-white text-sm mb-1">Date</label>
            <input type="date" name="event-date" required class="w-full p-2 border border-brand-orange/30 rounded bg-brand-dark text-brand-white">
          </div>
          <div>
            <label class="block text-brand-white text-sm mb-1">Start Time</label>
            <input type="time" name="event-start-time" class="w-full p-2 border border-brand-orange/30 rounded bg-brand-dark text-brand-white">
          </div>
          <div>
            <label class="block text-brand-white text-sm mb-1">End Time</label>
            <input type="time" name="event-end-time" class="w-full p-2 border border-brand-orange/30 rounded bg-brand-dark text-brand-white">
          </div>
        </div>
        <button type="button" onclick="removeDateTimeGroup(this)" class="mt-2 text-brand-red hover:text-white text-sm">Remove Date/Time</button>
      `;
      container.appendChild(groupDiv);
    };

    window.removeDateTimeGroup = (button) => {
      button.closest('.date-time-group').remove();
    };

    // Initialize admin functionality
    checkAuthState();

  } catch (error) {
    console.error('❌ Firebase initialization failed:', error);
    const menuContainer = document.getElementById('menu-container');
    if (menuContainer) {
      menuContainer.innerHTML = `
        <div class="text-center py-8">
          <p class="text-brand-red mb-4">⚠️ Failed to initialize Firebase</p>
          <p class="text-brand-white/70">Please check back soon for our full menu!</p>
        </div>
      `;
    }
  }
  </script>
</body>
</html>