---

---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="802 Soul Kitchen brings authentic soul food to Vermont festivals, markets, and special events. Find our next pop-up location in Brattleboro and surrounding areas."
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/styles.css" />
    <title>802 Soul Kitchen - Vermont Pop-Up Soul Food | Festivals & Events</title>

    <style>
      /* Force dark text in date/time inputs - ULTRA AGGRESSIVE */
      .force-dark-text,
      .force-dark-text::-webkit-datetime-edit,
      .force-dark-text::-webkit-datetime-edit-text,
      .force-dark-text::-webkit-datetime-edit-month-field,
      .force-dark-text::-webkit-datetime-edit-day-field,
      .force-dark-text::-webkit-datetime-edit-year-field,
      .force-dark-text::-webkit-datetime-edit-hour-field,
      .force-dark-text::-webkit-datetime-edit-minute-field,
      .force-dark-text::-webkit-datetime-edit-meridiem-field {
        color: #000000 !important;
        -webkit-text-fill-color: #000000 !important;
        background-color: #ffffff !important;
      }

      .force-dark-text::-webkit-calendar-picker-indicator {
        filter: invert(0) !important;
        opacity: 1 !important;
      }

      .force-dark-text {
        color-scheme: light !important;
      }

      /* Additional fallback for any date/time inputs */
      input[type='date'],
      input[type='time'] {
        color: #000000 !important;
        background: #ffffff !important;
        color-scheme: light !important;
      }

      /* Epic Logo Glow Effect */
      .logo-glow {
        filter: drop-shadow(0 0 20px rgba(255, 153, 68, 0.3))
          drop-shadow(0 0 40px rgba(218, 44, 43, 0.2));
        transition: all 0.4s ease;
        transform: scale(1);
      }

      .logo-container:hover .logo-glow {
        filter: drop-shadow(0 0 30px rgba(255, 153, 68, 0.6))
          drop-shadow(0 0 60px rgba(218, 44, 43, 0.5)) drop-shadow(0 0 100px rgba(255, 170, 0, 0.3));
        transform: scale(1.05);
      }

      /* Badass Tailwind-inspired effects for future use */
      .epic-gradient-bg {
        background: linear-gradient(
          135deg,
          rgba(218, 44, 43, 0.1) 0%,
          rgba(255, 153, 68, 0.1) 50%,
          rgba(218, 44, 43, 0.1) 100%
        );
        background-size: 200% 200%;
        animation: gradientShift 3s ease infinite;
      }

      @keyframes gradientShift {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }
    </style>
  </head>
  <body>
    <!-- Content wrapper -->
    <div class="bg-brand-dark text-brand-white relative min-h-screen overflow-x-hidden">
      <!-- Corner gradients -->
      <div class="pointer-events-none fixed inset-0 z-0">
        <div
          class="from-brand-red/20 absolute left-0 top-0 h-96 w-96 rounded-full bg-gradient-to-br to-transparent blur-3xl"
        >
        </div>
        <div
          class="from-brand-orange/20 absolute right-0 top-0 h-96 w-96 rounded-full bg-gradient-to-bl to-transparent blur-3xl"
        >
        </div>
        <div
          class="from-brand-orange/15 absolute bottom-0 left-0 h-96 w-96 rounded-full bg-gradient-to-tr to-transparent blur-3xl"
        >
        </div>
        <div
          class="from-brand-red/15 absolute bottom-0 right-0 h-96 w-96 rounded-full bg-gradient-to-tl to-transparent blur-3xl"
        >
        </div>
      </div>

      <!-- Three-column layout container -->
      <div class="flex min-h-screen">
        <!-- Left Sidebar - Logo and Contact (Fixed) -->
        <div
          class="bg-brand-dark border-brand-orange/30 fixed left-0 top-0 z-20 h-screen w-80 overflow-y-auto border-r-4 p-6"
        >
          <!-- Logo with Epic Hover Glow -->
          <div class="mb-8">
            <div class="logo-container group relative cursor-pointer">
              <!-- Optional: Animated gradient background behind logo -->
              <div
                class="epic-gradient-bg absolute -inset-4 rounded-2xl opacity-0 blur-sm transition-opacity duration-500 group-hover:opacity-100"
              >
              </div>

              <img
                src="/assets/802Logo.png"
                alt="802 Soul Kitchen - Vermont Pop-Up Soul Food Restaurant Logo"
                class="logo-glow group-hover:saturate-110 relative z-10 mb-6 h-64 transition-all
                     duration-500 hover:rotate-1
                     hover:scale-105 group-hover:brightness-110"
              />

              <!-- Optional: Pulsing ring effect on hover -->
              <div
                class="border-brand-orange/30 absolute inset-0 rounded-full border-2 opacity-0 group-hover:animate-ping group-hover:opacity-100"
              >
              </div>
            </div>

            <h1 class="sr-only">
              802 Soul Kitchen - Authentic Soul Food at Vermont Festivals and Events
            </h1>
          </div>

          <!-- Contact Info -->
          <div class="text-brand-white mb-8">
            <h3 class="text-brand-orange mb-4 text-xl font-bold">Contact Us</h3>
            <div class="space-y-4 text-sm">
              <div class="flex items-start">
                <svg
                  class="text-brand-red mr-3 mt-0.5 h-5 w-5 flex-shrink-0"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                  ></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                <span>Brattleboro, VT<br />05301</span>
              </div>
              <div class="flex items-center">
                <svg
                  class="text-brand-red mr-3 h-5 w-5 flex-shrink-0"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                  ></path>
                </svg>
                <a href="tel:802-490-9163" class="hover:text-brand-red">(802) 490-9163</a>
              </div>
              <div class="flex items-center">
                <svg
                  class="text-brand-red mr-3 h-5 w-5 flex-shrink-0"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                  ></path>
                </svg>
                <a href="mailto:802soulkitchen@gmail.com" class="hover:text-brand-red break-all"
                  >802soulkitchen@gmail.com</a
                >
              </div>
              <div class="flex items-center">
                <svg
                  class="text-brand-red mr-3 h-5 w-5 flex-shrink-0"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32V7.46H6.11v4.24h3.39v12h5.09V11.7h3.74l.56-4.24z"
                  ></path>
                </svg>
                <a
                  href="https://www.facebook.com/profile.php?id=100092039355894"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="hover:text-brand-red">Facebook</a
                >
              </div>
              <div class="flex items-center">
                <svg
                  class="text-brand-red mr-3 h-5 w-5 flex-shrink-0"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"
                  ></path>
                </svg>
                <a
                  href="https://www.instagram.com/802soulkitchen/"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="hover:text-brand-red">Instagram</a
                >
              </div>
              <div class="flex items-center">
                <svg
                  class="text-brand-red mr-3 h-5 w-5 flex-shrink-0"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M19.589 6.686a4.793 4.793 0 0 1-3.77-4.245V2h-3.445v13.672a2.896 2.896 0 0 1-5.201 1.743l-.002-.001.002.001a2.895 2.895 0 0 1 3.183-4.51v-3.5a6.329 6.329 0 0 0-1.183-.11C5.618 9.295 2 12.913 2 17.457 2 22.002 5.618 25.62 10.173 25.62c4.555 0 8.172-3.618 8.172-8.163V8.687a8.113 8.113 0 0 0 4.852 1.627v-3.628a4.8 4.8 0 0 1-3.608 0z"
                  ></path>
                </svg>
                <a
                  href="https://www.tiktok.com/@802soulkitchenvt"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="hover:text-brand-red">TikTok</a
                >
              </div>
            </div>
          </div>

          <!-- Next Event -->
          <div class="text-brand-white">
            <h3 class="text-brand-orange mb-4 text-xl font-bold">Our Next Event</h3>
            <div
              id="sidebar-next-event"
              class="bg-brand-dark/50 border-brand-orange/20 rounded-lg border p-3 text-sm"
            >
              <!-- Next event will be dynamically loaded here -->
              <div class="text-brand-white/70 italic">
                <p>Loading next event...</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Middle Content Area (Scrollable) -->
        <div class="bg-brand-dark ml-80 mr-80 min-h-screen flex-1 overflow-y-auto">
          <main class="space-y-12 p-8">
            <!-- About Section -->
            <section id="about" class="slide-in">
              <h2 class="gradient-text mb-6 text-3xl font-bold">Who We Are</h2>
              <div class="glass-effect card-hover rounded-xl p-8 shadow-2xl">
                <p class="mb-6 text-lg leading-relaxed">
                  We are 802 Soul Kitchen, a pop-up food vendor with a passion for bringing unique
                  and flavorful dishes to festivals, markets, and special events. We don't have a
                  fixed location or a food truck because our home is where the event is! Our mission
                  is to provide an unforgettable culinary experience that complements the vibrant
                  atmosphere of every gathering we join.
                </p>
                <p class="text-lg leading-relaxed">
                  Follow our schedule to find out where we'll be serving up our latest creations
                  next!
                </p>
              </div>
            </section>

            <!-- Menu Section -->
            <section id="menu" class="slide-in">
              <h2 class="gradient-text mb-6 text-3xl font-bold">Our Menu</h2>
              <div id="menu-container" class="glass-effect card-hover rounded-xl p-8 shadow-2xl">
                <!-- Menu will be dynamically loaded here -->
              </div>
            </section>

            <!-- Catering Section -->
            <section id="catering" class="slide-in">
              <h2 class="gradient-text mb-6 text-3xl font-bold">Catering Services</h2>
              <div class="glass-effect card-hover rounded-xl p-8 shadow-2xl">
                <p class="mb-6 text-lg leading-relaxed">
                  Planning a special event? Let 802 Soul Kitchen bring our signature flavors
                  directly to your celebration! We cater private parties, corporate events,
                  weddings, and gatherings of all sizes.
                </p>
                <div class="grid gap-6 md:grid-cols-2">
                  <div>
                    <h3 class="text-brand-orange mb-3 text-xl font-bold">What We Offer</h3>
                    <ul class="text-brand-white space-y-2">
                      <li>• Custom menu planning</li>
                      <li>• Fresh, made-to-order dishes</li>
                      <li>• Professional service staff</li>
                      <li>• Flexible serving options</li>
                      <li>• Dietary accommodations</li>
                    </ul>
                  </div>
                  <div>
                    <h3 class="text-brand-orange mb-3 text-xl font-bold">Event Types</h3>
                    <ul class="text-brand-white space-y-2">
                      <li>• Private parties</li>
                      <li>• Corporate events</li>
                      <li>• Weddings & receptions</li>
                      <li>• Family gatherings</li>
                      <li>• Community events</li>
                    </ul>
                  </div>
                </div>
                <div class="bg-brand-orange/20 mt-6 rounded-lg p-4">
                  <p class="text-brand-white font-medium">
                    Contact us today to discuss your catering needs and get a custom quote!
                  </p>
                </div>
              </div>
            </section>

            <!-- Find Us Section -->
            <section id="events" class="slide-in">
              <h2 class="gradient-text mb-6 text-3xl font-bold">Our Upcoming Events!</h2>
              <div id="events-list" class="space-y-6">
                <!-- Events will be dynamically loaded here -->
              </div>
            </section>
          </main>
        </div>

        <!-- Right Photo Column (Fixed) -->
        <div
          class="bg-brand-dark border-brand-orange/30 fixed right-0 top-0 z-20 h-screen w-80 overflow-y-auto border-l-4 p-4"
        >
          <div id="photo-gallery" class="space-y-4">
            <h3 class="text-brand-orange mb-4 text-center text-xl font-bold">Our Kitchen</h3>
            <!-- Photos will be loaded here -->
            <div class="text-brand-white/70 p-8 text-center italic">
              <p>Add photos to the PHOTOS folder to display them here</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Footer -->
      <footer class="bg-brand-dark relative z-10 mt-12 overflow-hidden py-8">
        <div class="text-brand-white container relative z-10 mx-auto text-center">
          <p class="text-lg font-medium">&copy; 2025 802 Soul Kitchen. All Rights Reserved.</p>
          <div class="mt-3 flex justify-center space-x-2">
            <span class="text-brand-orange">●</span>
            <span class="text-brand-white">Soul Food</span>
            <span class="text-brand-orange">●</span>
            <span class="text-brand-white">Pop-Up Events</span>
            <span class="text-brand-orange">●</span>
            <span class="text-brand-white">Vermont</span>
            <span class="text-brand-orange">●</span>
          </div>
        </div>
      </footer>

      <!-- Admin Floating Action Button -->
      <button
        type="button"
        id="admin-fab"
        class="bg-brand-red hover:bg-brand-orange floating pulse-animation fixed bottom-6 left-6 z-50 flex h-8 w-8 items-center justify-center rounded-full text-white shadow-2xl transition-all duration-300"
        aria-label="Open admin panel"
      >
        <svg
          class="h-4 w-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
      </button>

      <!-- Admin Modal -->
      <div
        id="admin-modal"
        class="fixed inset-0 z-40 flex hidden items-center justify-center bg-black bg-opacity-50 p-4"
      >
        <div
          class="bg-brand-white border-brand-orange/30 relative w-full max-w-lg rounded-2xl border p-8 shadow-2xl"
        >
          <!-- Close Button -->
          <button
            type="button"
            id="modal-close-x-btn"
            class="text-brand-dark hover:text-brand-red absolute right-4 top-4 p-1 transition-colors"
            aria-label="Close admin panel"
          >
            <svg
              class="h-6 w-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
          <!-- This is the container for the admin panel content -->
          <div id="admin-panel-content">
            <!-- Authentication -->
            <div id="auth-section">
              <h3 class="text-brand-dark mb-4 text-xl font-bold">Admin Login</h3>
              <div class="text-center">
                <button
                  type="button"
                  id="google-signin-btn"
                  class="flex w-full items-center justify-center gap-3 rounded-lg border-2 border-gray-300 bg-white px-6 py-3 font-medium text-gray-700 transition-all duration-300 hover:bg-gray-50"
                >
                  <svg width="20" height="20" viewBox="0 0 24 24">
                    <path
                      fill="#4285F4"
                      d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    ></path>
                    <path
                      fill="#34A853"
                      d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    ></path>
                    <path
                      fill="#FBBC05"
                      d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    ></path>
                    <path
                      fill="#EA4335"
                      d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    ></path>
                  </svg>
                  Sign in with Google
                </button>
                <p id="auth-error" class="mt-3 text-sm text-red-500"></p>
              </div>
            </div>

            <!-- Admin Management Tabs -->
            <div id="admin-main-section" class="hidden">
              <div class="mb-4 flex items-center justify-between">
                <h3 class="text-brand-dark text-xl font-bold">Admin Panel</h3>
                <div class="flex gap-2">
                  <button
                    type="button"
                    id="logout-btn"
                    class="bg-brand-dark text-brand-white hover:bg-brand-dark/80 rounded-lg px-4 py-2 transition-all duration-300"
                    >Logout</button
                  >
                  <button
                    type="button"
                    id="close-modal-btn"
                    class="text-brand-dark hover:text-brand-red text-2xl transition-colors"
                    >&times;</button
                  >
                </div>
              </div>

              <!-- Tab Navigation -->
              <div class="mb-6 flex gap-2">
                <button
                  type="button"
                  id="events-tab"
                  class="tab-btn bg-brand-red rounded-lg px-4 py-2 font-medium text-white"
                  >Events</button
                >
                <button
                  type="button"
                  id="menu-tab"
                  class="tab-btn bg-brand-dark/20 text-brand-dark rounded-lg px-4 py-2 font-medium"
                  >Menu</button
                >
              </div>

              <!-- Events Management -->
              <div id="events-management" class="tab-content">
                <div class="mb-4">
                  <button
                    type="button"
                    id="add-event-btn"
                    class="bg-brand-red hover:bg-brand-orange rounded-lg px-4 py-2 text-white transition-all"
                    >+ Add Event</button
                  >
                </div>

                <!-- Event Form -->
                <div
                  id="event-form"
                  class="border-brand-orange/30 mb-6 hidden rounded-lg border bg-gray-50 p-4"
                >
                  <h4 class="text-brand-dark mb-4 font-bold">Add/Edit Event</h4>
                  <input type="hidden" id="event-id" />
                  <div class="space-y-4">
                    <input
                      type="text"
                      id="event-name"
                      placeholder="Event Name (e.g., Festival on the Green)"
                      class="border-brand-orange/30 focus:border-brand-red focus:ring-brand-red/20 text-brand-dark w-full rounded-lg border-2 bg-white p-3 transition-all focus:ring-2"
                    />
                    <input
                      type="text"
                      id="event-location"
                      placeholder="Location (e.g., City Park)"
                      class="border-brand-orange/30 focus:border-brand-red focus:ring-brand-red/20 text-brand-dark w-full rounded-lg border-2 bg-white p-3 transition-all focus:ring-2"
                    />
                    <textarea
                      id="event-description"
                      placeholder="Short Description"
                      class="border-brand-orange/30 focus:border-brand-red focus:ring-brand-red/20 text-brand-dark w-full rounded-lg border-2 bg-white p-3 transition-all focus:ring-2"
                      rows="2"></textarea>

                    <!-- Date/Time Entries -->
                    <div class="border-t pt-4">
                      <div class="mb-3 flex items-center justify-between">
                        <h5 class="text-brand-dark font-medium">Event Dates & Times</h5>
                        <button
                          type="button"
                          id="add-datetime-btn"
                          class="bg-brand-orange hover:bg-brand-red rounded px-3 py-1 text-sm text-white transition-all"
                          >+ Add Date/Time</button
                        >
                      </div>
                      <div id="datetime-entries" class="space-y-3">
                        <!-- Date/time entries will be added here -->
                      </div>
                    </div>

                    <div class="flex gap-4 border-t pt-4">
                      <button
                        type="button"
                        id="save-event-btn"
                        class="bg-brand-red hover:bg-brand-orange rounded-lg px-4 py-2 text-white transition-all"
                        >Save Event</button
                      >
                      <button
                        type="button"
                        id="cancel-event-btn"
                        class="bg-brand-dark text-brand-white hover:bg-brand-dark/80 rounded-lg px-4 py-2 transition-all"
                        >Cancel</button
                      >
                    </div>
                  </div>
                </div>

                <!-- Events List -->
                <div class="border-brand-orange/30 rounded-lg border bg-gray-50 p-4">
                  <h4 class="text-brand-dark mb-4 font-bold">Current Events</h4>
                  <div id="events-admin-list" class="max-h-80 overflow-y-auto">
                    <!-- Events will be dynamically loaded here for admin management -->
                  </div>
                </div>
              </div>

              <!-- Menu Management -->
              <div id="menu-management" class="tab-content hidden">
                <div class="mb-4">
                  <button
                    type="button"
                    id="add-menu-item-btn"
                    class="bg-brand-red hover:bg-brand-orange rounded-lg px-4 py-2 text-white transition-all"
                    >+ Add Menu Item</button
                  >
                </div>

                <!-- Menu Item Form -->
                <div
                  id="menu-item-form"
                  class="border-brand-orange/30 mb-6 hidden rounded-lg border bg-gray-50 p-4"
                >
                  <h4 class="text-brand-dark mb-4 font-bold">Add/Edit Menu Item</h4>
                  <input type="hidden" id="menu-item-id" />
                  <div class="space-y-4">
                    <input
                      type="text"
                      id="menu-item-name"
                      placeholder="Item Name"
                      class="border-brand-orange/30 focus:border-brand-red focus:ring-brand-red/20 text-brand-dark w-full rounded-lg border-2 bg-white p-3 transition-all focus:ring-2"
                    />
                    <textarea
                      id="menu-item-description"
                      placeholder="Description (optional)"
                      class="border-brand-orange/30 focus:border-brand-red focus:ring-brand-red/20 text-brand-dark w-full rounded-lg border-2 bg-white p-3 transition-all focus:ring-2"
                      rows="2"></textarea>
                    <select
                      id="menu-item-category"
                      aria-label="Menu item category"
                      class="border-brand-orange/30 focus:border-brand-red focus:ring-brand-red/20 text-brand-dark w-full rounded-lg border-2 bg-white p-3 transition-all focus:ring-2"
                    >
                      <option value="">Select Category</option>
                      <option value="Mains">Mains</option>
                      <option value="Combos">Combos</option>
                      <option value="Sides">Sides</option>
                      <option value="Drinks">Drinks</option>
                      <option value="Dessert">Dessert</option>
                    </select>
                    <input
                      type="number"
                      id="menu-item-order"
                      placeholder="Display Order"
                      class="border-brand-orange/30 focus:border-brand-red focus:ring-brand-red/20 text-brand-dark w-full rounded-lg border-2 bg-white p-3 transition-all focus:ring-2"
                    />
                    <div class="flex gap-4">
                      <button
                        type="button"
                        id="save-menu-item-btn"
                        class="bg-brand-red hover:bg-brand-orange rounded-lg px-4 py-2 text-white transition-all"
                        >Save Item</button
                      >
                      <button
                        type="button"
                        id="cancel-menu-item-btn"
                        class="bg-brand-dark text-brand-white hover:bg-brand-dark/80 rounded-lg px-4 py-2 transition-all"
                        >Cancel</button
                      >
                    </div>
                  </div>
                </div>

                <!-- Menu Items List -->
                <div class="border-brand-orange/30 rounded-lg border bg-gray-50 p-4">
                  <h4 class="text-brand-dark mb-4 font-bold">Current Menu Items</h4>
                  <div id="menu-items-list" class="max-h-80 overflow-y-auto">
                    <!-- Menu items will be dynamically loaded here -->
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Simple script to test if JavaScript is working at all
      console.log('🚀 BASIC SCRIPT STARTING - THIS SHOULD ALWAYS SHOW');
    </script>

    <script type="module">
      // ========================================
      // FIREBASE SCRIPT COMPLETELY REBUILT v5.0 - DUPLICATE PREVENTION
      // ========================================

      // Track if script has been initialized (but allow re-run for debugging)
      if (window.firebaseScriptInitialized) {
        console.log('� Firebase script re-running (was already initialized)');
      } else {
        console.log('🆕 Firebase script first run');
        window.firebaseScriptInitialized = true;
      }
      // ========================================
      console.log('🚀 FIREBASE SCRIPT v5.0 - DUPLICATE PREVENTION ENABLED...');

      // Debug: Check if elements exist
      console.log('🔍 Debug: Checking elements...');
      console.log('admin-fab:', document.getElementById('admin-fab'));
      console.log('photo-gallery:', document.getElementById('photo-gallery'));
      console.log('events-list:', document.getElementById('events-list'));

      // Test admin button immediately (before Firebase)
      const adminFab = document.getElementById('admin-fab');
      const adminModal = document.getElementById('admin-modal');

      if (adminFab && adminModal) {
        console.log('✅ Admin elements found, setting up click handler...');
        adminFab.addEventListener('click', () => {
          console.log('🖱️ Admin button clicked!');
          adminModal.classList.remove('hidden');
        });

        // Close modal handlers
        const closeModalBtn = document.getElementById('close-modal-btn');
        const modalCloseXBtn = document.getElementById('modal-close-x-btn');

        if (closeModalBtn) {
          closeModalBtn.addEventListener('click', () => {
            adminModal.classList.add('hidden');
          });
        }

        if (modalCloseXBtn) {
          modalCloseXBtn.addEventListener('click', () => {
            adminModal.classList.add('hidden');
          });
        }
      } else {
        console.error('❌ Admin elements not found!');
      }

      // Test photo gallery immediately
      const photoGallery = document.getElementById('photo-gallery');
      if (photoGallery) {
        console.log('✅ Photo gallery found, testing image loading...');

        // Test loading a single image to verify photos work
        const testImg = new Image();
        testImg.onload = () => {
          console.log('✅ Test image loaded successfully');
          // Photos will be loaded later in the initialization sequence
        };
        testImg.onerror = () => {
          console.error('❌ Test image failed to load');
        };
        testImg.src = '/photos/1.jpg';
      } else {
        console.error('❌ Photo gallery element not found!');
      }

      try {
        console.log('📥 Starting Firebase imports...');
        const { initializeApp } = await import(
          'https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js'
        );
        console.log('✅ Firebase App imported');

        const {
          getFirestore,
          collection,
          onSnapshot,
          doc,
          addDoc,
          updateDoc,
          deleteDoc,
          getDoc,
          query,
          orderBy,
          getDocs,
        } = await import('https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js');
        console.log('✅ Firebase Firestore imported');

        const { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged } =
          await import('https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js');
        console.log('✅ Firebase Auth imported');

        console.log('✅ All Firebase modules imported successfully');

        // Firebase configuration
        const firebaseConfig = {
          apiKey: 'AIzaSyDvGG5PnYpksQRzk8RvZ7Lyc8FaxwM-kG4',
          authDomain: 'soulkitchen-9e6b2.firebaseapp.com',
          projectId: 'soulkitchen-9e6b2',
          storageBucket: 'soulkitchen-9e6b2.firebasestorage.app',
          messagingSenderId: '370735557737',
          appId: '1:370735557737:web:f08d5a4052e12b5a7f06f8',
          measurementId: 'G-4XNBK7TP6J',
        };

        // Initialize Firebase
        console.log('🔧 Initializing Firebase...');
        const app = initializeApp(firebaseConfig);
        console.log('✅ Firebase app initialized');

        const db = getFirestore(app);
        console.log('✅ Firestore initialized');

        const auth = getAuth(app);
        console.log('✅ Auth initialized');
        const provider = new GoogleAuthProvider();

        // Global error handler temporarily disabled for debugging
        // window.addEventListener('unhandledrejection', (event) => {
        //   console.error('🚨 Unhandled promise rejection:', event.reason);
        //   if (event.reason && event.reason.code === 'permission-denied') {
        //     console.error('🔒 Global permission denied error caught');
        //     console.error('🔒 Auth state at error:', {
        //       user: auth.currentUser?.email,
        //       emailVerified: auth.currentUser?.emailVerified,
        //       uid: auth.currentUser?.uid
        //     });
        //     event.preventDefault();
        //   }
        // });

        // Load menu items from Firestore
        const menuContainer = document.getElementById('menu-container');
        const menuCollection = collection(db, 'menu');

        onSnapshot(menuCollection, snapshot => {
          const items = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

          // Sort items by category order and then by item order
          const categoryOrder = ['Mains', 'Combos', 'Sides', 'Drinks', 'Dessert'];
          items.sort((a, b) => {
            if (a.category !== b.category) {
              return categoryOrder.indexOf(a.category) - categoryOrder.indexOf(b.category);
            }
            return (a.order || 0) - (b.order || 0);
          });

          // Group items by category
          const categorizedItems = {};
          categoryOrder.forEach(category => {
            categorizedItems[category] = items.filter(item => item.category === category);
          });

          let menuHTML = '<div class="menu-grid">';
          categoryOrder.forEach(category => {
            if (categorizedItems[category] && categorizedItems[category].length > 0) {
              menuHTML += `<div class="menu-category">
            <h3 class="text-xl font-bold mb-4 text-brand-orange">${category}</h3>
            <ul class="menu-bullet-list">`;

              categorizedItems[category].forEach(item => {
                menuHTML += `<li class="menu-bullet-item">• <strong class="text-brand-white">${item.name}</strong>`;
                if (item.description) {
                  menuHTML += `<br><span class="text-brand-white/80 text-sm ml-3">${item.description}</span>`;
                }
                menuHTML += '</li>';
              });

              menuHTML += '</ul></div>';
            }
          });
          menuHTML += '</div>';

          if (items.length === 0) {
            menuHTML = '<p class="text-brand-white text-center">No menu items available.</p>';
          }

          menuContainer.innerHTML = menuHTML;
        });

        // Initialize full admin panel script from original script.js
        // This is all the admin functionality from the original
        const AUTHORIZED_ADMINS = ['802soulkitchen@gmail.com', 'scottkunian@gmail.com'];
        let loggedIn = false;
        let currentUser = null;
        let currentEvents = [];
        let galleryInterval = null;
        let galleryTimeouts = []; // Track all setTimeout timers
        let animationFrameId = null; // Track requestAnimationFrame

        // Memory leak prevention: Clear all gallery timers
        const clearAllGalleryTimers = () => {
          // Clear all setTimeout timers
          galleryTimeouts.forEach(timeoutId => clearTimeout(timeoutId));
          galleryTimeouts = [];

          // Clear animation frame
          if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
            animationFrameId = null;
          }

          // Clear interval
          if (galleryInterval) {
            clearInterval(galleryInterval);
            galleryInterval = null;
          }
        };

        const adminFab = document.getElementById('admin-fab');
        const adminModal = document.getElementById('admin-modal');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const modalCloseXBtn = document.getElementById('modal-close-x-btn');

        const authSection = document.getElementById('auth-section');
        const adminMainSection = document.getElementById('admin-main-section');
        const googleSigninBtn = document.getElementById('google-signin-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const authError = document.getElementById('auth-error');

        adminFab.addEventListener('click', () => {
          adminModal.classList.remove('hidden');
        });

        closeModalBtn.addEventListener('click', () => {
          adminModal.classList.add('hidden');
        });

        modalCloseXBtn.addEventListener('click', () => {
          adminModal.classList.add('hidden');
        });

        adminModal.addEventListener('click', e => {
          if (e.target === adminModal) {
            adminModal.classList.add('hidden');
          }
        });

        // Authentication state management
        const isAuthorizedAdmin = user => {
          return user && AUTHORIZED_ADMINS.includes(user.email);
        };

        onAuthStateChanged(auth, user => {
          currentUser = user;
          if (isAuthorizedAdmin(user)) {
            loggedIn = true;
            authError.textContent = '';
            authSection.classList.add('hidden');
            adminMainSection.classList.remove('hidden');
            document.getElementById('modal-close-x-btn').style.display = 'none';
            showEventsTab();
            renderEvents(currentEvents);
            renderEventsAdmin(currentEvents);
            loadMenuItems();
          } else {
            loggedIn = false;
            authSection.classList.remove('hidden');
            adminMainSection.classList.add('hidden');
            document.getElementById('modal-close-x-btn').style.display = 'block';
            renderEvents(currentEvents);
            if (user && !isAuthorizedAdmin(user)) {
              authError.textContent = `Access denied. "${user.email}" is not authorized.`;
            }
          }
        });

        googleSigninBtn.addEventListener('click', async () => {
          try {
            authError.textContent = '';
            await signInWithPopup(auth, provider);
          } catch (error) {
            console.error('Sign-in error:', error);
            authError.textContent = 'Sign-in failed. Please try again.';
          }
        });

        logoutBtn.addEventListener('click', async () => {
          try {
            await signOut(auth);
            adminModal.classList.remove('hidden');
          } catch (error) {
            console.error('Sign-out error:', error);
          }
        });

        // Tab Management
        const eventsTab = document.getElementById('events-tab');
        const menuTab = document.getElementById('menu-tab');
        const eventsManagement = document.getElementById('events-management');
        const menuManagement = document.getElementById('menu-management');

        function showEventsTab() {
          eventsTab.classList.remove('bg-brand-dark/20', 'text-brand-dark');
          eventsTab.classList.add('bg-brand-red', 'text-white');
          menuTab.classList.remove('bg-brand-red', 'text-white');
          menuTab.classList.add('bg-brand-dark/20', 'text-brand-dark');

          eventsManagement.classList.remove('hidden');
          menuManagement.classList.add('hidden');
        }

        function showMenuTab() {
          menuTab.classList.remove('bg-brand-dark/20', 'text-brand-dark');
          menuTab.classList.add('bg-brand-red', 'text-white');
          eventsTab.classList.remove('bg-brand-red', 'text-white');
          eventsTab.classList.add('bg-brand-dark/20', 'text-brand-dark');

          menuManagement.classList.remove('hidden');
          eventsManagement.classList.add('hidden');
        }

        eventsTab.addEventListener('click', showEventsTab);
        menuTab.addEventListener('click', showMenuTab);

        // Add Menu Item button handler
        const addMenuItemBtn = document.getElementById('add-menu-item-btn');
        addMenuItemBtn.addEventListener('click', () => {
          const menuItemForm = document.getElementById('menu-item-form');
          if (menuItemForm.classList.contains('hidden')) {
            menuItemForm.classList.remove('hidden');
            addMenuItemBtn.textContent = 'Cancel';
          } else {
            menuItemForm.classList.add('hidden');
            addMenuItemBtn.textContent = '+ Add Menu Item';
            // Clear form
            document.getElementById('menu-item-name').value = '';
            document.getElementById('menu-item-description').value = '';
            document.getElementById('menu-item-category').value = 'Mains';
            document.getElementById('menu-item-order').value = '';
            document.getElementById('menu-item-id').value = '';
          }
        });

        // Save Menu Item button handler
        const saveMenuItemBtn = document.getElementById('save-menu-item-btn');
        saveMenuItemBtn.addEventListener('click', async () => {
          console.log('💾 Save menu item clicked');

          const name = document.getElementById('menu-item-name').value.trim();
          const description = document.getElementById('menu-item-description').value.trim();
          const category = document.getElementById('menu-item-category').value;
          const order = parseInt(document.getElementById('menu-item-order').value) || 0;
          const id = document.getElementById('menu-item-id').value;

          if (!name) {
            alert('Please enter a menu item name');
            return;
          }

          try {
            const menuData = {
              name,
              description,
              category,
              order,
            };

            if (id) {
              // Update existing item
              console.log('📝 Updating menu item:', id);
              const docRef = doc(db, 'menu', id);
              await updateDoc(docRef, menuData);
              console.log('✅ Menu item updated');
            } else {
              // Add new item
              console.log('➕ Adding new menu item');
              await addDoc(collection(db, 'menu'), menuData);
              console.log('✅ Menu item added');
            }

            // Hide form and reset
            document.getElementById('menu-item-form').classList.add('hidden');
            addMenuItemBtn.textContent = '+ Add Menu Item';

            // Clear form
            document.getElementById('menu-item-name').value = '';
            document.getElementById('menu-item-description').value = '';
            document.getElementById('menu-item-category').value = 'Mains';
            document.getElementById('menu-item-order').value = '';
            document.getElementById('menu-item-id').value = '';
          } catch (error) {
            console.error('❌ Error saving menu item:', error);
            alert('Error saving menu item: ' + error.message);
          }
        });

        // Save Event button handler - COPIED EXACTLY FROM WORKING script.js
        const saveEventBtn = document.getElementById('save-event-btn');
        let eventSaving = false; // Prevent double-clicks

        saveEventBtn.addEventListener('click', async () => {
          if (!loggedIn) {
            alert('Please log in first.');
            return;
          }

          if (eventSaving) {
            console.log('⏳ Already saving event, ignoring click');
            return;
          }

          // Prevent duplicate operations with a more aggressive check
          if (window.lastEventSaveAttempt && Date.now() - window.lastEventSaveAttempt < 2000) {
            console.log('🚫 Preventing duplicate save - too soon since last attempt');
            return;
          }

          window.lastEventSaveAttempt = Date.now();
          eventSaving = true;
          saveEventBtn.disabled = true;
          saveEventBtn.textContent = 'Saving...';

          // Collect actual form data from date/time entries
          const dates = document.querySelectorAll('input[name="event-date[]"]');
          const startTimes = document.querySelectorAll('input[name="event-start-time[]"]');
          const endTimes = document.querySelectorAll('input[name="event-end-time[]"]');

          const dateTimeData = [];
          for (let i = 0; i < dates.length; i++) {
            const dateValue = dates[i].value;
            const startTimeValue = startTimes[i]?.value || '';
            const endTimeValue = endTimes[i]?.value || '';

            if (dateValue) {
              // Only add if date is provided
              dateTimeData.push({
                date: dateValue,
                startTime: startTimeValue,
                endTime: endTimeValue,
              });
            }
          }

          console.log('📋 Collected form data:', dateTimeData);

          const eventNameInput = document.getElementById('event-name');
          const eventLocationInput = document.getElementById('event-location');
          const eventDescriptionInput = document.getElementById('event-description');
          const eventIdInput = document.getElementById('event-id');

          if (!eventNameInput.value || !eventLocationInput.value || dateTimeData.length === 0) {
            alert('Please fill in the event name, location, and at least one date.');
            return;
          }

          const eventData = {
            name: eventNameInput.value,
            location: eventLocationInput.value,
            dateTimes: dateTimeData,
            // Keep first date for sorting compatibility
            date: dateTimeData[0].date,
          };

          // Only add description if it's not empty
          if (eventDescriptionInput.value && eventDescriptionInput.value.trim()) {
            eventData.description = eventDescriptionInput.value.trim();
          }

          console.log('🚀 Sending event data:', JSON.stringify(eventData, null, 2));

          // Check auth state before save
          console.log('🔐 Auth state before save:', {
            user: auth.currentUser?.email,
            emailVerified: auth.currentUser?.emailVerified,
            uid: auth.currentUser?.uid,
          });

          const id = eventIdInput.value;

          try {
            // Log the exact data being sent to Firestore for validation
            console.log('🔍 Validating event data before save:');
            console.log('📏 Name length:', eventData.name.length);
            console.log('📏 Location length:', eventData.location.length);
            console.log(
              '📏 Description length:',
              eventData.description ? eventData.description.length : 'N/A'
            );
            console.log('📏 Date format:', eventData.date, 'Length:', eventData.date.length);
            console.log('📏 DateTimes array length:', eventData.dateTimes.length);
            eventData.dateTimes.forEach((dt, index) => {
              console.log(`📏 DateTime ${index}:`, {
                date: dt.date,
                dateLength: dt.date.length,
                startTime: dt.startTime,
                startTimeLength: dt.startTime ? dt.startTime.length : 'N/A',
                endTime: dt.endTime,
                endTimeLength: dt.endTime ? dt.endTime.length : 'N/A',
              });
            });

            if (id) {
              // Update existing event
              console.log('🔄 Updating existing event with ID:', id);
              const eventDoc = doc(db, 'events', id);
              await updateDoc(eventDoc, eventData);
              console.log('✅ Event updated successfully');
            } else {
              // Add new event - First let's test the rules directly
              console.log('🆕 Creating new event');
              console.log('🔑 Auth token before addDoc:', await auth.currentUser?.getIdToken());

              // Detailed validation of the data we're sending
              console.log('🧪 Final validation of event data:');
              console.log('📋 Event data keys:', Object.keys(eventData));
              console.log('📋 Expected keys: name, location, dateTimes, date, description');
              console.log('📋 dateTimes structure:', JSON.stringify(eventData.dateTimes, null, 2));

              // Validate each dateTime object
              eventData.dateTimes.forEach((dt, i) => {
                console.log(`📋 DateTime ${i} keys:`, Object.keys(dt));
                console.log(`📋 DateTime ${i} date:`, dt.date, `(length: ${dt.date.length})`);
                console.log(
                  `📋 DateTime ${i} startTime:`,
                  dt.startTime,
                  `(length: ${dt.startTime ? dt.startTime.length : 'null'})`
                );
                console.log(
                  `📋 DateTime ${i} endTime:`,
                  dt.endTime,
                  `(length: ${dt.endTime ? dt.endTime.length : 'null'})`
                );
              });

              // Get baseline count before attempting to create
              const initialSnapshot = await getDocs(collection(db, 'events'));
              const initialCount = initialSnapshot.docs.length;
              console.log('📊 Initial event count:', initialCount);

              let docRef;
              let operationSucceeded = false;
              let attempts = 0;
              const maxAttempts = 1; // Reduce to 1 attempt for now to focus on the root cause

              try {
                console.log('� Attempting to create document...');
                docRef = await addDoc(collection(db, 'events'), eventData);
                console.log('🎉 Event created successfully with ID:', docRef.id);
                operationSucceeded = true;
              } catch (addDocError) {
                console.log('❌ addDoc failed with error:', addDocError.code, addDocError.message);
                console.log('🔍 Full error object:', addDocError);

                // Let's see if it's a validation error specifically
                if (addDocError.code === 'permission-denied') {
                  console.log(
                    '🚨 Permission denied - this suggests a Firestore rule validation failure'
                  );
                  console.log(
                    '� Auth check: User is',
                    auth.currentUser?.email,
                    'verified:',
                    auth.currentUser?.emailVerified
                  );

                  // Try to understand what exactly failed
                  console.log("🔍 Let's examine our data against the rules:");
                  console.log('✅ Required keys check: name, location, dateTimes, date');
                  console.log('  - name:', typeof eventData.name, eventData.name?.length, 'chars');
                  console.log(
                    '  - location:',
                    typeof eventData.location,
                    eventData.location?.length,
                    'chars'
                  );
                  console.log('  - date:', typeof eventData.date, eventData.date?.length, 'chars');
                  console.log(
                    '  - dateTimes:',
                    typeof eventData.dateTimes,
                    Array.isArray(eventData.dateTimes),
                    eventData.dateTimes?.length,
                    'items'
                  );
                  console.log(
                    '  - description:',
                    typeof eventData.description,
                    eventData.description?.length,
                    'chars'
                  );
                }

                throw addDocError; // Re-throw for now to see the full error
              }

              if (operationSucceeded) {
                console.log('✅ Event creation confirmed successful');
              } else {
                throw new Error('Event creation failed after all attempts');
              }
            }

            // Clear form and hide
            document.getElementById('event-form').classList.add('hidden');
            document.getElementById('add-event-btn').textContent = '+ Add Event';
            eventNameInput.value = '';
            eventLocationInput.value = '';
            eventDescriptionInput.value = '';
            eventIdInput.value = '';

            console.log('✅ Event save operation completed successfully');
          } catch (error) {
            console.error('❌ Error saving event: ', error);
            console.error('🚨 Error code:', error.code);
            console.error('🚨 Error message:', error.message);
            console.error('🚨 Error stack:', error.stack);

            // More specific error handling
            if (error.code === 'permission-denied') {
              console.error('🔒 Permission denied - checking auth state:');
              console.error('🔒 Current user:', auth.currentUser?.email);
              console.error('🔒 Email verified:', auth.currentUser?.emailVerified);
              console.error('🔒 UID:', auth.currentUser?.uid);
              alert("Permission denied. Please make sure you're logged in as an admin.");
            } else {
              alert('There was an error saving the event.\nError: ' + error.message);
            }
          } finally {
            // Reset saving state
            eventSaving = false;
            saveEventBtn.disabled = false;
            saveEventBtn.textContent = 'Save Event';
          }
        });

        // Add Event button handler
        const addEventBtn = document.getElementById('add-event-btn');
        addEventBtn.addEventListener('click', () => {
          const eventForm = document.getElementById('event-form');
          if (eventForm.classList.contains('hidden')) {
            // Show form
            eventForm.classList.remove('hidden');
            addEventBtn.textContent = 'Cancel';

            // Clear form for new event
            document.getElementById('event-id').value = '';
            document.getElementById('event-name').value = '';
            document.getElementById('event-location').value = '';
            document.getElementById('event-description').value = '';
            console.log('📝 Add Event form opened');
          } else {
            // Hide form (Cancel)
            eventForm.classList.add('hidden');
            addEventBtn.textContent = '+ Add Event';

            // Clear form
            document.getElementById('event-id').value = '';
            document.getElementById('event-name').value = '';
            document.getElementById('event-location').value = '';
            document.getElementById('event-description').value = '';
            console.log('❌ Add Event cancelled');
          }
        });

        // Cancel Event button handler
        const cancelEventBtn = document.getElementById('cancel-event-btn');
        cancelEventBtn.addEventListener('click', () => {
          // Hide form
          document.getElementById('event-form').classList.add('hidden');
          document.getElementById('add-event-btn').textContent = '+ Add Event';

          // Clear form
          document.getElementById('event-id').value = '';
          document.getElementById('event-name').value = '';
          document.getElementById('event-location').value = '';
          document.getElementById('event-description').value = '';
          console.log('❌ Event editing cancelled');
        });

        // Cancel Menu Item button handler
        const cancelMenuItemBtn = document.getElementById('cancel-menu-item-btn');
        cancelMenuItemBtn.addEventListener('click', () => {
          // Hide form
          document.getElementById('menu-item-form').classList.add('hidden');
          document.getElementById('add-menu-item-btn').textContent = '+ Add Menu Item';

          // Clear form
          document.getElementById('menu-item-name').value = '';
          document.getElementById('menu-item-description').value = '';
          document.getElementById('menu-item-category').value = 'Mains';
          document.getElementById('menu-item-order').value = '';
          document.getElementById('menu-item-id').value = '';
          console.log('❌ Menu item editing cancelled');
        });

        // Add Date/Time button handler
        const addDateTimeBtn = document.getElementById('add-datetime-btn');
        addDateTimeBtn.addEventListener('click', () => {
          const container = document.getElementById('datetime-entries');

          // Create new date/time group
          const dateTimeGroup = document.createElement('div');
          dateTimeGroup.className = 'bg-brand-dark/10 p-3 rounded border-l-4 border-brand-orange';
          dateTimeGroup.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
          <div>
            <label class="block text-sm font-medium text-brand-dark mb-1">Date</label>
            <input type="date" name="event-date[]" class="w-full px-3 py-2 border border-brand-dark/20 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent bg-white text-brand-dark">
          </div>
          <div>
            <label class="block text-sm font-medium text-brand-dark mb-1">Start Time</label>
            <input type="time" name="event-start-time[]" class="w-full px-3 py-2 border border-brand-dark/20 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent bg-white text-brand-dark">
          </div>
          <div>
            <label class="block text-sm font-medium text-brand-dark mb-1">End Time</label>
            <input type="time" name="event-end-time[]" class="w-full px-3 py-2 border border-brand-dark/20 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent bg-white text-brand-dark">
          </div>
        </div>
        <button type="button" onclick="removeDateTimeGroup(this)" class="mt-2 text-brand-red hover:text-white text-sm">Remove Date/Time</button>
      `;

          container.appendChild(dateTimeGroup);
          console.log('➕ New date/time group added');
        });

        // Firebase Events and Menu functionality
        const eventsCollection = collection(db, 'events');
        const eventsList = document.getElementById('events-list');

        // Load events from Firestore
        const loadEvents = () => {
          console.log('📅 Loading events from Firestore...');
          // Remove orderBy since documents don't have 'order' field
          onSnapshot(
            eventsCollection,
            snapshot => {
              console.log(`📅 Events snapshot received: ${snapshot.docs.length} events`);
              window.lastKnownEventCount = snapshot.docs.length; // Track event count for error handling
              currentEvents = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

              // Sort events by date (earliest first) for proper chronological order
              currentEvents.sort((a, b) => {
                const dateA = new Date(a.date + 'T00:00:00');
                const dateB = new Date(b.date + 'T00:00:00');
                return dateA - dateB;
              });

              console.log('📅 Current events (sorted by date):', currentEvents);
              renderEvents(currentEvents);
              if (loggedIn) {
                renderEventsAdmin(currentEvents);
              }
            },
            error => {
              console.error('❌ Error loading events:', error);
            }
          );
        };

        // Test Firebase connection first
        console.log('🧪 Testing Firebase connection...');
        const testCollection = collection(db, 'events');
        getDocs(testCollection)
          .then(snapshot => {
            console.log(`🧪 Firebase test successful: found ${snapshot.docs.length} documents`);
            if (snapshot.docs.length > 0) {
              console.log('🧪 Sample document:', snapshot.docs[0].data());
            }

            // Initialize events loading after successful test
            loadEvents();
          })
          .catch(error => {
            console.error('🧪 Firebase test failed:', error);
            // Try to load events anyway
            loadEvents();
          });

        // Load menu items function
        const loadMenuItems = () => {
          // Remove orderBy since documents don't have 'order' field
          onSnapshot(collection(db, 'menu'), snapshot => {
            const menuItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (loggedIn) {
              renderMenuAdmin(menuItems);
            }
          });
        };

        // Helper function to check if event is still active/future
        const isEventActive = event => {
          const now = new Date();
          console.log(`🔍 Checking event activity for: ${event.name || 'Unnamed Event'}`);
          console.log(`🕐 Current time: ${now.toISOString()}`);

          return event.dateTimes.some(dt => {
            const eventDate = new Date(dt.date + 'T00:00:00');
            console.log(`📅 Event date: ${dt.date}, Start: ${dt.startTime}, End: ${dt.endTime}`);

            if (dt.endTime) {
              // If there's an end time, event is active until end time
              const [hours, minutes] = dt.endTime.split(':').map(Number);
              eventDate.setHours(hours, minutes, 0, 0);
              const isActive = now < eventDate; // Show event if we haven't reached end time yet
              console.log(
                `⏰ End time check: ${now.toISOString()} < ${eventDate.toISOString()} = ${isActive}`
              );
              return isActive;
            } else if (dt.startTime) {
              // If only start time, show event for the whole day it starts
              // Check if it's the same day and past start time, or a future day
              const [hours, minutes] = dt.startTime.split(':').map(Number);
              const eventStart = new Date(eventDate);
              eventStart.setHours(hours, minutes, 0, 0);
              const eventEndOfDay = new Date(eventDate);
              eventEndOfDay.setHours(23, 59, 59, 999);

              const isActive = now >= eventStart && now <= eventEndOfDay;
              console.log(
                `📍 Start time check: ${eventStart.toISOString()} <= ${now.toISOString()} <= ${eventEndOfDay.toISOString()} = ${isActive}`
              );
              return isActive || eventDate > now;
            } else {
              // No specific time, show all day
              eventDate.setHours(23, 59, 59, 999);
              const isActive = eventDate >= now;
              console.log(
                `📆 All day check: ${eventDate.toISOString()} >= ${now.toISOString()} = ${isActive}`
              );
              return isActive;
            }
          });
        };

        // Render sidebar next event
        const renderSidebarNextEvent = events => {
          const sidebarNextEvent = document.getElementById('sidebar-next-event');
          if (!sidebarNextEvent) return;

          const activeEvents = events.filter(isEventActive);

          // Sort active events by date to ensure we show the earliest next event
          activeEvents.sort((a, b) => {
            const dateA = new Date(a.date + 'T00:00:00');
            const dateB = new Date(b.date + 'T00:00:00');
            return dateA - dateB;
          });

          if (activeEvents.length === 0) {
            sidebarNextEvent.innerHTML = `
          <div class="text-brand-white/70 italic">
            <p>No upcoming events scheduled.</p>
          </div>
        `;
            return;
          }

          const nextEvent = activeEvents[0];
          let dateTimeHTML = '';
          if (nextEvent.dateTimes && nextEvent.dateTimes.length > 0) {
            const firstDateTime = nextEvent.dateTimes[0];
            const eventDate = new Date(firstDateTime.date + 'T00:00:00');
            const formattedDate = eventDate.toLocaleDateString('en-US', {
              weekday: 'short',
              month: 'short',
              day: 'numeric',
            });

            dateTimeHTML = `
          <div class="flex items-center mb-2">
            <svg class="w-4 h-4 mr-2 text-brand-red flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <span class="font-medium">${formattedDate}</span>
            ${
              firstDateTime.startTime && firstDateTime.endTime
                ? `<span class="text-brand-orange ml-2">${firstDateTime.startTime}-${firstDateTime.endTime}</span>`
                : firstDateTime.time
                  ? `<span class="text-brand-orange ml-2">${firstDateTime.time}</span>`
                  : ''
            }
          </div>
        `;
          }

          sidebarNextEvent.innerHTML = `
        <div class="bg-brand-dark/50 p-3 rounded-lg border border-brand-orange/20">
          <h4 class="font-bold text-brand-white mb-2">${nextEvent.name}</h4>
          ${dateTimeHTML}
          <div class="flex items-start mb-2">
            <svg class="w-4 h-4 mr-2 mt-0.5 text-brand-red flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <span class="text-brand-white/90">${nextEvent.location}</span>
          </div>
          ${nextEvent.description ? `<p class="text-brand-white/80 text-xs leading-relaxed">${nextEvent.description}</p>` : ''}
        </div>
      `;
        };

        // Render events from Firestore
        const renderEvents = events => {
          console.log(`🎨 Rendering ${events.length} events`);
          const activeEvents = events.filter(isEventActive);

          // Ensure active events maintain chronological order (earliest first)
          activeEvents.sort((a, b) => {
            const dateA = new Date(a.date + 'T00:00:00');
            const dateB = new Date(b.date + 'T00:00:00');
            return dateA - dateB;
          });

          console.log(`🎨 Active events: ${activeEvents.length}`);

          // Debug: Show which events are considered active
          activeEvents.forEach(event => {
            console.log(`✅ Active event: ${event.name}`);
          });

          renderSidebarNextEvent(events);

          if (!eventsList) {
            console.error('❌ Events list element not found!');
            return;
          }

          eventsList.innerHTML = '';
          if (activeEvents.length === 0) {
            console.log('📅 No active events, showing placeholder');
            eventsList.innerHTML = `<div class="glass-effect p-8 rounded-xl shadow-2xl text-center text-brand-white card-hover">
          <p class="text-lg font-medium">No upcoming events scheduled right now. Check back soon!</p>
        </div>`;
            return;
          }

          activeEvents.forEach((event, index) => {
            const eventElement = document.createElement('div');
            eventElement.className = 'glass-effect p-8 rounded-xl shadow-2xl card-hover slide-in';
            eventElement.style.animationDelay = `${index * 0.1}s`;

            let dateTimeHTML = '';
            if (event.dateTimes && event.dateTimes.length > 0) {
              event.dateTimes.forEach(dt => {
                const eventDate = new Date(dt.date + 'T00:00:00');
                const formattedDate = eventDate.toLocaleDateString('en-US', {
                  weekday: 'long',
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                });

                dateTimeHTML += `
              <div class="flex items-center text-lg text-brand-white font-medium mb-2">
                <div class="w-8 h-8 mr-3 flex items-center justify-center bg-brand-red/10 rounded-lg">
                  <svg class="w-5 h-5 text-brand-red" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                </div>
                <span>${formattedDate}</span>
                ${
                  dt.startTime || dt.endTime
                    ? `<span class="text-brand-orange font-medium ml-4">
                    ${dt.startTime || ''}${dt.startTime && dt.endTime ? ' - ' : ''}${dt.endTime || ''}
                  </span>`
                    : dt.time
                      ? `<span class="text-brand-orange font-medium ml-4">${dt.time}</span>`
                      : ''
                }
              </div>
            `;
              });
            }

            eventElement.innerHTML = `
          <h3 class="text-2xl font-bold mb-4 text-brand-orange">${event.name}</h3>
          <div class="mt-4 space-y-3">
            ${dateTimeHTML}
            <div class="flex items-center text-lg text-brand-white font-semibold">
              <div class="w-8 h-8 flex items-center justify-center bg-brand-dark/10 rounded-lg">
                <svg class="w-5 h-5 text-brand-dark" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
              </div>
              <div class="flex items-center flex-1 -ml-5">
                <span><span class="text-brand-red">Location:</span> ${event.location}</span>
                <a href="https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(event.location)}" target="_blank" class="ml-4 bg-brand-red/20 hover:bg-brand-red text-brand-red hover:text-white px-3 py-1 rounded-lg text-sm font-medium transition-all duration-300 flex items-center gap-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3l6-3"></path></svg>
                  Directions
                </a>
              </div>
            </div>
          </div>
          ${
            event.description
              ? `<div class="mt-3 p-4 bg-brand-orange/20 rounded-lg">
            <p class="text-brand-white font-medium leading-relaxed">${event.description}</p>
          </div>`
              : ''
          }
        `;

            eventsList.appendChild(eventElement);
          });
        };

        // Modern Photo Gallery - Badass Tailwind Edition 🔥
        let availablePhotos = [];
        let currentPhotoIndex = 0;
        const photosPerPage = 5; // Perfect for vertical sidebar

        const loadAvailablePhotos = async () => {
          availablePhotos = [];
          const knownImages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];

          for (const imageNum of knownImages) {
            // Only check for WebP since we know all images are optimized WebP
            const imagePath = `/photos/${imageNum}.webp`;

            try {
              const response = await fetch(imagePath, { method: 'HEAD' });
              if (response.ok) {
                availablePhotos.push({
                  number: imageNum,
                  path: imagePath,
                  format: 'webp',
                });
              }
            } catch (e) {
              console.warn(`⚠️ Image not found: ${imagePath}`);
            }
          }

          if (availablePhotos.length > 0) {
            initializePhotoGallery();
          }
        };

        const displayPhotos = (startIndex = 0) => {
          const photoGallery = document.getElementById('photo-gallery');
          if (!photoGallery || availablePhotos.length === 0) return;

          const header = photoGallery.querySelector('h3');
          const photosToShow = [];

          for (let i = 0; i < photosPerPage && i < availablePhotos.length; i++) {
            const photoIndex = (startIndex + i) % availablePhotos.length;
            photosToShow.push(availablePhotos[photoIndex]);
          }

          // Clean slate - modern approach
          const existingContainer = photoGallery.querySelector('.photos-container');

          // Create badass modern grid - optimized for sidebar
          const gridContainer = document.createElement('div');
          gridContainer.className = 'photos-container space-y-4 mt-4';

          photosToShow.forEach((photoInfo, index) => {
            const photoCard = document.createElement('div');
            photoCard.className =
              'group relative overflow-hidden rounded-xl bg-gradient-to-br from-brand-orange/20 to-brand-red/20 backdrop-blur-sm border border-brand-orange/30 shadow-2xl transform translate-y-8 opacity-0 hover:scale-[1.02] transition-all duration-500 ease-out';
            photoCard.style.animationDelay = `${index * 150}ms`;

            const img = document.createElement('img');
            img.src = photoInfo.path;
            img.alt = '802 Soul Kitchen - Delicious Soul Food';
            img.className =
              'w-full h-56 object-cover transition-all duration-700 group-hover:scale-110 group-hover:brightness-110';
            img.loading = 'lazy';

            // Add sick hover overlay
            const overlay = document.createElement('div');
            overlay.className =
              'absolute inset-0 bg-gradient-to-t from-brand-dark/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-end p-4';
            overlay.innerHTML =
              '<div class="text-brand-white font-medium text-sm">Soul Food Perfection 🔥</div>';

            photoCard.appendChild(img);
            photoCard.appendChild(overlay);
            gridContainer.appendChild(photoCard);
          });

          // Simple transition for stability
          if (existingContainer) {
            // Testing individual effects - currently showing:
            const effects = ['whirlwind', 'slidingDoors', 'shatter'];
            const randomEffect = effects[Math.floor(Math.random() * effects.length)];
            // Removed console logging to prevent memory accumulation

            if (randomEffect === 'whirlwind') {
              // 🌪️ WHIRLWIND EFFECT
              const photos = existingContainer.querySelectorAll('.group');
              photos.forEach((photo, index) => {
                const timeoutId = setTimeout(() => {
                  // Null check to prevent errors if element was removed
                  if (photo && photo.style && photo.parentNode) {
                    photo.style.transition = 'all 1s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
                    photo.style.transform = `rotate(${360 + index * 90}deg) scale(0) translateY(-100px)`;
                    photo.style.opacity = '0';
                    photo.style.filter = 'blur(10px)';
                  }
                }, index * 80);
                galleryTimeouts.push(timeoutId);
              });
            } else if (randomEffect === 'tearingPaper') {
              // 📄 TEARING PAPER EFFECT
              existingContainer.style.transition = 'all 0.8s ease-out';
              existingContainer.style.clipPath =
                'polygon(0 0, 100% 0, 85% 50%, 100% 100%, 0 100%, 15% 50%)';
              existingContainer.style.transform = 'skewX(-5deg) scale(0.8)';
              existingContainer.style.opacity = '0';
              existingContainer.style.filter = 'sepia(1) contrast(2)';
            } else if (randomEffect === 'slidingDoors') {
              // 🚪 SLIDING DOORS EFFECT
              const photos = existingContainer.querySelectorAll('.group');
              photos.forEach((photo, index) => {
                const timeoutId = setTimeout(() => {
                  // Null check to prevent errors if element was removed
                  if (photo && photo.style && photo.parentNode) {
                    photo.style.transition = 'all 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                    photo.style.transform =
                      index % 2 === 0 ? 'translateX(-120%)' : 'translateX(120%)';
                    photo.style.opacity = '0';
                  }
                }, index * 60);
                galleryTimeouts.push(timeoutId);
              });
            } else if (randomEffect === 'vortex') {
              // 🌀 VORTEX EFFECT
              existingContainer.style.transition = 'all 1.2s cubic-bezier(0.6, 0.04, 0.98, 0.335)';
              existingContainer.style.transform = 'rotate(720deg) scale(0.1)';
              existingContainer.style.transformOrigin = 'center center';
              existingContainer.style.opacity = '0';
              existingContainer.style.filter = 'blur(15px) hue-rotate(180deg)';
            } else if (randomEffect === 'shatter') {
              // 💥 SHATTER EFFECT
              const photos = existingContainer.querySelectorAll('.group');
              photos.forEach((photo, index) => {
                const timeoutId = setTimeout(() => {
                  // Null check to prevent errors if element was removed
                  if (photo && photo.style && photo.parentNode) {
                    photo.style.transition = 'all 0.6s cubic-bezier(0.55, 0.085, 0.68, 0.53)';
                    const randomX = (Math.random() - 0.5) * 300;
                    const randomY = (Math.random() - 0.5) * 200;
                    const randomRotate = (Math.random() - 0.5) * 180;
                    photo.style.transform = `translate(${randomX}px, ${randomY}px) rotate(${randomRotate}deg) scale(0.3)`;
                    photo.style.opacity = '0';
                    photo.style.filter = 'brightness(2) contrast(0.5)';
                  }
                }, index * 50);
                galleryTimeouts.push(timeoutId);
              });
            }

            const mainTimeoutId = setTimeout(() => {
              if (existingContainer && existingContainer.parentNode) {
                existingContainer.remove();
              }
              if (photoGallery && gridContainer) {
                photoGallery.appendChild(gridContainer);
              }

              // 🚀 ENTRANCE EFFECTS for new photos
              animationFrameId = requestAnimationFrame(() => {
                const photos = gridContainer.querySelectorAll('.group');

                if (randomEffect === 'whirlwind') {
                  photos.forEach((photo, index) => {
                    if (photo && photo.style) {
                      photo.style.transform = 'rotate(-360deg) scale(0) translateY(100px)';
                      const entranceTimeoutId = setTimeout(() => {
                        if (photo && photo.style && photo.parentNode) {
                          photo.style.transition = 'all 1s cubic-bezier(0.34, 1.56, 0.64, 1)';
                          photo.style.transform = 'rotate(0deg) scale(1) translateY(0)';
                          photo.style.opacity = '1';
                        }
                      }, index * 150);
                      galleryTimeouts.push(entranceTimeoutId);
                    }
                  });
                } else if (randomEffect === 'tearingPaper') {
                  if (gridContainer && gridContainer.style) {
                    gridContainer.style.clipPath = 'polygon(0 0, 100% 0, 100% 100%, 0 100%)';
                  }
                  photos.forEach((photo, index) => {
                    if (photo && photo.style) {
                      photo.style.transform = 'skewX(5deg) scale(1.2)';
                      const entranceTimeoutId = setTimeout(() => {
                        if (photo && photo.style && photo.parentNode) {
                          photo.style.transition = 'all 0.8s ease-out';
                          photo.style.transform = 'skewX(0deg) scale(1) translateY(0)';
                          photo.style.opacity = '1';
                        }
                      }, index * 120);
                      galleryTimeouts.push(entranceTimeoutId);
                    }
                  });
                } else {
                  photos.forEach((photo, index) => {
                    const entranceTimeoutId = setTimeout(() => {
                      if (photo && photo.style && photo.parentNode) {
                        photo.style.transition = 'all 0.8s cubic-bezier(0.34, 1.56, 0.64, 1)';
                        photo.style.transform = 'translateY(0)';
                        photo.style.opacity = '1';
                      }
                    }, index * 120);
                    galleryTimeouts.push(entranceTimeoutId);
                  });
                }
              });
            }, 800);
            galleryTimeouts.push(mainTimeoutId);
          } else {
            // First load
            photoGallery.innerHTML = '';
            if (header) photoGallery.appendChild(header);
            photoGallery.appendChild(gridContainer);

            // Sick entrance animation
            const initialLoadTimeoutId = setTimeout(() => {
              const photos = gridContainer?.querySelectorAll('.group');
              if (!photos) return;

              photos.forEach((photo, index) => {
                const photoTimeoutId = setTimeout(
                  () => {
                    if (photo && photo.style) {
                      photo.style.transition = 'all 1s cubic-bezier(0.34, 1.56, 0.64, 1)';
                      photo.style.transform = 'translateY(0)';
                      photo.style.opacity = '1';
                    }
                  },
                  index * 200 + 300
                );
                if (photoTimeoutId) galleryTimeouts.push(photoTimeoutId);
              });
            }, 100);
            if (initialLoadTimeoutId) galleryTimeouts.push(initialLoadTimeoutId);
          }
        };

        const initializePhotoGallery = () => {
          // Clear all existing timers before starting new ones
          clearAllGalleryTimers();

          displayPhotos(0);

          if (availablePhotos.length > photosPerPage) {
            galleryInterval = setInterval(() => {
              currentPhotoIndex = (currentPhotoIndex + photosPerPage) % availablePhotos.length;
              displayPhotos(currentPhotoIndex);
            }, 8000);
          }
        };

        // Load photo gallery
        loadAvailablePhotos();

        // Pause gallery interval when tab is hidden
        document.addEventListener('visibilitychange', () => {
          if (document.hidden) {
            clearAllGalleryTimers();
          } else {
            if (!galleryInterval && availablePhotos.length > photosPerPage) {
              galleryInterval = setInterval(() => {
                currentPhotoIndex = (currentPhotoIndex + photosPerPage) % availablePhotos.length;
                displayPhotos(currentPhotoIndex);
              }, 8000);
            }
          }
        });

        // Clean up timers when page is about to unload
        window.addEventListener('beforeunload', () => {
          clearAllGalleryTimers();
        });

        // Clean up timers when page loses focus
        window.addEventListener('blur', () => {
          clearAllGalleryTimers();
        });

        // Admin functionality - Google Auth

        const checkAuthState = () => {
          const auth = getAuth();
          onAuthStateChanged(auth, user => {
            currentUser = user;
            const adminBtn = document.getElementById('admin-btn');
            const adminModal = document.getElementById('admin-modal');

            if (user) {
              console.log('✅ User signed in:', user.email);
              if (adminBtn) adminBtn.style.display = 'block';
              loadAdminData();
            } else {
              console.log('❌ User signed out');
              if (adminBtn) adminBtn.style.display = 'none';
              if (adminModal) adminModal.classList.add('hidden');
            }
          });
        };

        // Google Sign In
        const signInWithGoogle = async () => {
          try {
            const auth = getAuth();
            const provider = new GoogleAuthProvider();
            const result = await signInWithPopup(auth, provider);
            console.log('✅ Google sign in successful:', result.user.email);
          } catch (error) {
            console.error('❌ Google sign in failed:', error);
            alert('Sign in failed: ' + error.message);
          }
        };

        // Sign Out
        const signOutUser = async () => {
          try {
            const auth = getAuth();
            await signOut(auth);
            console.log('✅ User signed out');
          } catch (error) {
            console.error('❌ Sign out failed:', error);
          }
        };

        // Load admin data
        const loadAdminData = async () => {
          try {
            // Remove orderBy since documents don't have 'order' field
            const eventsCollection = collection(db, 'events');
            const menuCollection = collection(db, 'menu');

            const [eventsSnapshot, menuSnapshot] = await Promise.all([
              getDocs(eventsCollection),
              getDocs(menuCollection),
            ]);

            const events = eventsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            const menuItems = menuSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

            renderEventsAdmin(events);
            renderMenuAdmin(menuItems);
          } catch (error) {
            console.error('❌ Failed to load admin data:', error);
          }
        };

        // Render events for admin
        const renderEventsAdmin = events => {
          const container = document.getElementById('events-admin-list');
          if (!container) return;

          container.innerHTML = events
            .map(
              event => `
        <div class="bg-brand-dark/30 p-4 rounded-lg border border-brand-orange/20 mb-3">
          <div class="flex justify-between items-start mb-2">
            <h4 class="font-bold text-brand-white">${event.name}</h4>
            <div class="flex gap-2">
              <button onclick="editEvent('${event.id}')" class="text-brand-orange hover:text-brand-white text-sm">Edit</button>
              <button onclick="deleteEvent('${event.id}')" class="text-brand-red hover:text-white text-sm">Delete</button>
            </div>
          </div>
          <p class="text-brand-white/70 text-sm mb-1">${event.location}</p>
          ${event.description ? `<p class="text-brand-white/60 text-xs">${event.description}</p>` : ''}
          ${event.dateTimes ? `<p class="text-brand-orange text-xs mt-2">${event.dateTimes.length} date(s)</p>` : ''}
        </div>
      `
            )
            .join('');
        };

        // Render menu for admin
        const renderMenuAdmin = menuItems => {
          const container = document.getElementById('menu-items-list');
          if (!container) return;

          const categorized = {};
          menuItems.forEach(item => {
            if (!categorized[item.category]) categorized[item.category] = [];
            categorized[item.category].push(item);
          });

          container.innerHTML = Object.entries(categorized)
            .map(
              ([category, items]) => `
        <div class="mb-4">
          <h4 class="font-bold text-brand-orange mb-2">${category}</h4>
          ${items
            .map(
              item => `
            <div class="bg-brand-dark/30 p-3 rounded border border-brand-orange/20 mb-2">
              <div class="flex justify-between items-start">
                <div>
                  <span class="text-brand-white font-medium">${item.name}</span>
                  ${item.description ? `<p class="text-brand-white/70 text-sm">${item.description}</p>` : ''}
                </div>
                <div class="flex gap-2">
                  <button onclick="editMenuItem('${item.id}')" class="text-brand-orange hover:text-brand-white text-sm">Edit</button>
                  <button onclick="deleteMenuItem('${item.id}')" class="text-brand-red hover:text-white text-sm">Delete</button>
                </div>
              </div>
            </div>
          `
            )
            .join('')}
        </div>
      `
            )
            .join('');
        };

        // Event CRUD operations

        window.editEvent = async eventId => {
          console.log('📝 Editing event:', eventId);

          try {
            // Get the event data from Firestore
            const docRef = doc(db, 'events', eventId);
            const docSnap = await getDoc(docRef);

            if (docSnap.exists()) {
              const data = docSnap.data();

              // Show the events tab and form
              showEventsTab();
              document.getElementById('event-form').classList.remove('hidden');
              document.getElementById('add-event-btn').textContent = 'Cancel';

              // Populate the form fields
              document.getElementById('event-id').value = eventId;
              document.getElementById('event-name').value = data.name || '';
              document.getElementById('event-location').value = data.location || '';
              document.getElementById('event-description').value = data.description || '';

              // Clear existing date/time entries and populate with event data
              const container = document.getElementById('datetime-entries');
              container.innerHTML = '';

              if (data.dateTimes && data.dateTimes.length > 0) {
                data.dateTimes.forEach(dt => {
                  // Create new date/time group for each entry
                  const dateTimeGroup = document.createElement('div');
                  dateTimeGroup.className =
                    'bg-brand-dark/10 p-3 rounded border-l-4 border-brand-orange';
                  dateTimeGroup.innerHTML = `
                <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <div>
                    <label class="block text-sm font-medium text-brand-dark mb-1">Date</label>
                    <input type="date" name="event-date[]" value="${dt.date || ''}" class="w-full px-3 py-2 border border-brand-dark/20 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent bg-white text-brand-dark">
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-brand-dark mb-1">Start Time</label>
                    <input type="time" name="event-start-time[]" value="${dt.startTime || ''}" class="w-full px-3 py-2 border border-brand-dark/20 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent bg-white text-brand-dark">
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-brand-dark mb-1">End Time</label>
                    <input type="time" name="event-end-time[]" value="${dt.endTime || ''}" class="w-full px-3 py-2 border border-brand-dark/20 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent bg-white text-brand-dark">
                  </div>
                </div>
                <button type="button" onclick="removeDateTimeGroup(this)" class="mt-2 text-brand-red hover:text-white text-sm">Remove Date/Time</button>
              `;
                  container.appendChild(dateTimeGroup);
                });
              } else {
                // If no existing dateTimes, add one blank entry
                addDateTimeBtn.click();
              }

              console.log('✅ Event loaded for editing');
            } else {
              alert('Event not found');
            }
          } catch (error) {
            console.error('❌ Error loading event:', error);
            alert('Error loading event: ' + error.message);
          }
        };

        window.deleteEvent = async eventId => {
          if (!confirm('Are you sure you want to delete this event?')) return;

          try {
            await deleteDoc(doc(db, 'events', eventId));
            loadAdminData();
            loadEvents();
            alert('Event deleted successfully!');
          } catch (error) {
            console.error('❌ Failed to delete event:', error);
            alert('Failed to delete event: ' + error.message);
          }
        };

        // Menu CRUD operations
        window.addMenuItem = async () => {
          const form = document.getElementById('menu-item-form');
          const formData = new FormData(form);

          try {
            await addDoc(collection(db, 'menu'), {
              name: formData.get('menu-name'),
              description: formData.get('menu-description'),
              category: formData.get('menu-category'),
              order: Date.now(),
            });

            form.reset();
            loadAdminData();
            alert('Menu item added successfully!');
          } catch (error) {
            console.error('❌ Failed to add menu item:', error);
            alert('Failed to add menu item: ' + error.message);
          }
        };

        window.editMenuItem = async itemId => {
          console.log('📝 Editing menu item:', itemId);

          try {
            // Get the menu item data from Firestore
            const docRef = doc(db, 'menu', itemId);
            const docSnap = await getDoc(docRef);

            if (docSnap.exists()) {
              const data = docSnap.data();

              // Show the menu tab and form
              showMenuTab();
              document.getElementById('menu-item-form').classList.remove('hidden');
              document.getElementById('add-menu-item-btn').textContent = 'Cancel';

              // Populate the form fields
              document.getElementById('menu-item-id').value = itemId;
              document.getElementById('menu-item-name').value = data.name || '';
              document.getElementById('menu-item-description').value = data.description || '';
              document.getElementById('menu-item-category').value = data.category || 'Mains';
              document.getElementById('menu-item-order').value = data.order || '';

              console.log('✅ Menu item loaded for editing');
            } else {
              alert('Menu item not found');
            }
          } catch (error) {
            console.error('❌ Error loading menu item:', error);
            alert('Error loading menu item: ' + error.message);
          }
        };

        window.deleteMenuItem = async itemId => {
          if (!confirm('Are you sure you want to delete this menu item?')) return;

          try {
            await deleteDoc(doc(db, 'menu', itemId));
            loadAdminData();
            alert('Menu item deleted successfully!');
          } catch (error) {
            console.error('❌ Failed to delete menu item:', error);
            alert('Failed to delete menu item: ' + error.message);
          }
        };

        // Add date/time group for events
        window.addDateTimeGroup = () => {
          const container = document.getElementById('datetime-entries');
          const groupDiv = document.createElement('div');
          groupDiv.className =
            'date-time-group bg-brand-dark/20 p-3 rounded border border-brand-orange/30 mb-3';
          groupDiv.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
          <div>
            <label class="block text-brand-white text-sm mb-1">Date</label>
            <input type="date" name="event-date" required class="w-full p-2 border border-brand-orange/30 rounded bg-white text-brand-dark force-dark-text">
          </div>
          <div>
            <label class="block text-brand-white text-sm mb-1">Start Time</label>
            <input type="time" name="event-start-time" class="w-full p-2 border border-brand-orange/30 rounded bg-white text-brand-dark force-dark-text">
          </div>
          <div>
            <label class="block text-brand-white text-sm mb-1">End Time</label>
            <input type="time" name="event-end-time" class="w-full p-2 border border-brand-orange/30 rounded bg-white text-brand-dark force-dark-text">
          </div>
        </div>
        <button type="button" onclick="removeDateTimeGroup(this)" class="mt-2 text-brand-red hover:text-white text-sm">Remove Date/Time</button>
      `;
          container.appendChild(groupDiv);
        };

        window.removeDateTimeGroup = button => {
          button.closest('.date-time-group').remove();
        };

        // Initialize admin functionality
        checkAuthState();
      } catch (error) {
        console.error('❌ Firebase initialization failed:', error);
        const menuContainer = document.getElementById('menu-container');
        if (menuContainer) {
          menuContainer.innerHTML = `
        <div class="text-center py-8">
          <p class="text-brand-red mb-4">⚠️ Failed to initialize Firebase</p>
          <p class="text-brand-white/70">Please check back soon for our full menu!</p>
        </div>
      `;
        }
      }
    </script>
  </body>
</html>
